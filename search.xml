<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android 打包应用</title>
      <link href="2021/01/06/Android-%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8/"/>
      <url>2021/01/06/Android-%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>官方教程 <a href="https://reactnative.dev/docs/signed-apk-android/">https://reactnative.dev/docs/signed-apk-android/</a></p><p>Android要求所有应用都必须先使用证书进行数字签名，然后才能安装。 为了通过Google Play商店分发您的Android应用，需要使用发布密钥对其进行签名，然后再将其用于以后的所有更新。 自2017年以来，借助Google Play的应用签名功能，Google Play可以自动管理签名发布。 但是，在将应用程序二进制文件上传到Google Play之前，需要使用上传密钥对其进行签名。 Android Developers文档上的<a href="https://developer.android.com/tools/publishing/app-signing.html">“签署应用程序”</a>页面详细描述了该主题。 本指南简要介绍了该过程，并列出了打包JavaScript捆绑包所需的步骤。</p><h2 id="1-生成上传需要的秘钥"><a href="#1-生成上传需要的秘钥" class="headerlink" title="1. 生成上传需要的秘钥"></a>1. 生成上传需要的秘钥</h2><blockquote><p>Android要求所有应用都有一个数字签名才会被允许安装在用户手机上，Android开发者官网上的如何给你的 <a href="https://developer.android.com/tools/publishing/app-signing.html">应用签名文档</a> 描述了签名的细节  </p></blockquote><p>生成签名有两种方式：</p><ul><li>Keytool命令行</li><li>Android Studio界面生成</li></ul><p>您可以使用keytool生成专用签名密钥。 在Windows上，必须从 <code>C:\Program Files\Java\jdkx.x.x_x\bin</code> 运行keytool。</p><blockquote><p>（一定要记得你在那个路径生成的，后面需要用）</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">keytool -genkeypair -v -keystore hu-yi-key.keystore -alias huyi-key-alias -keyalg RSA -keysize 2048 -validity 10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⚠️  生成打包用的 key，将 <code>keystore</code> 命名为 <code>hu-yi-key.keystore</code> 别名 <code>-alias</code> 为 <code>huyi-key-alias</code> </p><p>⚠️  记住要输入的 <code>输入密钥库口令:</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 老命令keytool -genkey -v -keystore hu-yi-key.keystore -alias huyi-key-alias -keyalg RSA -keysize 2048 -validity 10000# 官方新命令keytool -genkeypair -v -keystore hu-yi-key.keystore -alias huyi-key-alias -keyalg RSA -keysize 2048 -validity 10000# 输入密钥库口令: huyi2021# 再次输入新口令: huyi2021# 您的名字与姓氏是什么?#   [Unknown]:  huyi# 您的组织单位名称是什么?#   [Unknown]:  huyi# 您的组织名称是什么?#   [Unknown]:  huyi# 您所在的城市或区域名称是什么?#   [Unknown]:  shanghai# 您所在的省&#x2F;市&#x2F;自治区名称是什么?#   [Unknown]:  shanghai# 该单位的双字母国家&#x2F;地区代码是什么?#   [Unknown]:  zh# CN&#x3D;huyi, OU&#x3D;huyi, O&#x3D;huyi, L&#x3D;shanghai, ST&#x3D;shanghai, C&#x3D;zh是否正确?#   [否]:  y## 正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 10,000 天): #    CN&#x3D;huyi, OU&#x3D;huyi, O&#x3D;huyi, L&#x3D;shanghai, ST&#x3D;shanghai, C&#x3D;zh# 输入 &lt;huyi-key-alias&gt; 的密钥口令#   (如果和密钥库口令相同, 按回车):# [正在存储 hu-yi-key.keystore]## 这是一个巨坑 不要迁移标准格式，否则打包错误# Warning:# JKS 密钥库使用专用格式。建议使用 &quot;keytool -importkeystore -srckeystore hu-yi-key.keystore -destkeystore hu-yi-key.keystore -deststoretype pkcs12&quot; 迁移到行业标准格式 PKCS12。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⚠️⚠️⚠️ 下面这是一个巨坑 不要迁移标准格式，否则打包错误，上面生成命令会提示下面命令，如果你照做了，坑可能爬不出来</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Warning:# JKS 密钥库使用专用格式。建议使用 &quot;keytool -importkeystore -srckeystore hu-yi-key.keystore -destkeystore hu-yi-key.keystore -deststoretype pkcs12# &quot; 迁移到行业标准格式 PKCS12。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106164646.png" alt="Android打包" loading="lazy"></p><h2 id="2-设置Gradle变量"><a href="#2-设置Gradle变量" class="headerlink" title="2. 设置Gradle变量"></a>2. 设置Gradle变量</h2><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106165559.png" alt="Android打包" loading="lazy"></p><p>如果 Gradle 加载失败，<a href="https://gradle.org/">https://gradle.org/</a> 点击下面按钮重新同步</p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106165742.png" alt="Android打包" loading="lazy"></p><p>Android Studio 打包</p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106170348.png" alt="Android打包" loading="lazy"></p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106170456.png" alt="Android打包" loading="lazy"></p><p><code>Key store path</code> 是选择你刚才命令行生成的key,根据你存放的路径选择key就行<br><code>Key store password</code> 是你设置的 密钥库口令: huyi2021<br><code>Key alias</code> 别名是直接刚才生成的，点击那个小图标直接选择就行<br><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106170653.png" alt="Android打包" loading="lazy"></p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106171623.png" alt="Android打包" loading="lazy"></p><p>安静的等待中。。。<br>不妨再出一个ios打包？？<br><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106171942.png" alt="Android打包" loading="lazy"></p><p>ok 顺利完成，我们去找到这个<code>.apk</code>的安装包<br><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106172307.png" alt="Android打包" loading="lazy"></p><p>根据图片的路径来找，然后直接发送到手机上就可以在手机上安装啦<br><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210106172535.png" alt="Android打包" loading="lazy"></p><p>Android 打包应用到此结束，不妨点下文章下面的小手手吧！！</p>]]></content>
      
      
      <categories>
          
          <category> 打包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac解决github图片开裂的问题</title>
      <link href="2021/01/05/mac%E8%A7%A3%E5%86%B3github%E5%9B%BE%E7%89%87%E5%BC%80%E8%A3%82%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/05/mac%E8%A7%A3%E5%86%B3github%E5%9B%BE%E7%89%87%E5%BC%80%E8%A3%82%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-mac-用户可以使用SwitchHosts-进行hosts管理-官网下载"><a href="#1-mac-用户可以使用SwitchHosts-进行hosts管理-官网下载" class="headerlink" title="1. mac 用户可以使用SwitchHosts 进行hosts管理  官网下载"></a>1. mac 用户可以使用SwitchHosts 进行hosts管理  <a href="https://oldj.github.io/SwitchHosts/#cn">官网下载</a></h3><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210105100704.png" alt="tu" loading="lazy"></p><h3 id="2-开启backup"><a href="#2-开启backup" class="headerlink" title="2. 开启backup"></a>2. 开启backup</h3><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210105095945.png" alt="开启backup" loading="lazy"></p><h3 id="3-将以下代码复制进去"><a href="#3-将以下代码复制进去" class="headerlink" title="3. 将以下代码复制进去"></a>3. 将以下代码复制进去</h3><pre class="line-numbers language-none"><code class="language-none"># GitHub Start 140.82.112.4       github.com199.232.69.194     github.global.ssl.fastly.net185.199.108.153    assets-cdn.github.com185.199.109.153    assets-cdn.github.com185.199.110.153    assets-cdn.github.com185.199.111.153    assets-cdn.github.com199.232.96.133     raw.githubusercontent.com199.232.96.133     gist.githubusercontent.com199.232.96.133     cloud.githubusercontent.com199.232.96.133     camo.githubusercontent.com199.232.96.133     avatars0.githubusercontent.com199.232.96.133     avatars1.githubusercontent.com199.232.96.133     avatars2.githubusercontent.com199.232.96.133     avatars3.githubusercontent.com199.232.96.133     avatars4.githubusercontent.com199.232.96.133     avatars5.githubusercontent.com199.232.96.133     avatars6.githubusercontent.com199.232.96.133     avatars7.githubusercontent.com199.232.96.133     avatars8.githubusercontent.com# GitHub End<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-如果还是不行，那就从这里-查询ip-上查询一下上面的域名对应的ip是否已经改变"><a href="#4-如果还是不行，那就从这里-查询ip-上查询一下上面的域名对应的ip是否已经改变" class="headerlink" title="4. 如果还是不行，那就从这里 查询ip 上查询一下上面的域名对应的ip是否已经改变"></a>4. 如果还是不行，那就从这里 <a href="https://www.ipaddress.com/">查询ip</a> 上查询一下上面的域名对应的ip是否已经改变</h3><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20210105100543.png" alt="tu" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给那个多愁善感的温柔女孩的一封信</title>
      <link href="2020/12/21/%E7%BB%99%E9%82%A3%E4%B8%AA%E5%A4%9A%E6%84%81%E5%96%84%E6%84%9F%E7%9A%84%E6%B8%A9%E6%9F%94%E5%A5%B3%E5%AD%A9%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
      <url>2020/12/21/%E7%BB%99%E9%82%A3%E4%B8%AA%E5%A4%9A%E6%84%81%E5%96%84%E6%84%9F%E7%9A%84%E6%B8%A9%E6%9F%94%E5%A5%B3%E5%AD%A9%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ddd4b921a2e6d57a3ee3d2e7f40819980e0dfc2019a3518622c6da0202934ce3">cd1e254f89b0ffab606786f147560fd1f585b9fde2a5734fb868567472cb15a0fa59515d98e5f050f51a4f4a0bd1244e145b160c8ee4c6c3fa590ac1e570b3cd1b9b02e9578acaebacb723654a168c825d7435e3441d5c6d438553e4a9a8a2ce610cd42d5d106a3c5d84a58d23cb773de8470bc62bf17f647d59ee8d8b1f6e13c7f33af75c2f73181825182a755c5edce0e4e8b863ee64d0976674d960847795687f74bc74d64dfc43f78a64917b1ca95f3631c8241cdaaacfeb8172dc46845edbac8bda462f9126f724a355656aaa156f5efa7ac28f39aebcabbb43fbdbbc739b83559d6137add7fb6a3689c28dc10fd2309a98d4bfffd752c99a5fa953593304924d2622005228ef83e927b90d840f13ae64d7e19a7a0b8f4f13a80babfb7a53da8f3dbb5b5f75fcbfe74ed816b5d3e5649ee4fbaf632e4bf25e73f66465492949a537390c125d3337b537ff1a47211593a3df4076c8d7a68485b7658894788506b5a399ec67be69a1d3727757525f4e23261840cfd41d723ad2d7b922e8a40e25aa4a3798ba5753b4f58a4b621dafb6fc15535817a5396e15ac52cd552fbfe1f32a8ee733071a8a782f3d447c4ed68e9ae3a2dbe04b455c8169372ed736d23e459dec0b008e012b9791be7c5a9d829619785857f18fc38884b086c298bb121ccd2dcb1f05160c925a28b4f239d3429e7b5146f98d6d7dceacb2b1aeec56f08df4310d71ce23a5189b28893ab8e515215f59e81796c51c725986a1a99e2707f60d9c2bc4da13eb0685881c820a571034919019dbe851e2da98c00bf7133a78ee88b16f683d1fa5373e84ea056a211e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 港湾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 朋友 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS之Array方法</title>
      <link href="2020/12/15/JS%E4%B9%8BArray%E6%96%B9%E6%B3%95/"/>
      <url>2020/12/15/JS%E4%B9%8BArray%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><h3 id="从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例"><a href="#从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例" class="headerlink" title="从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例"></a>从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例</h3><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>一个新的数组实例。</p><h4 id="从-String-生成数组"><a href="#从-String-生成数组" class="headerlink" title="从 String 生成数组"></a>从 String 生成数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'huyi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["h", "u", "y", "i"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="从-Set-生成数组"><a href="#从-Set-生成数组" class="headerlink" title="从 Set 生成数组"></a>从 Set 生成数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> hy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'huyi'</span><span class="token punctuation">,</span> <span class="token string">'happy'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">,</span> <span class="token string">'huyi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>hy<span class="token punctuation">)</span><span class="token comment">// ["huyi", "happy", "top"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="从-Map-生成数组"><a href="#从-Map-生成数组" class="headerlink" title="从 Map 生成数组"></a>从 Map 生成数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [[1, 2], [2, 4], [4, 8]]</span><span class="token keyword">const</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['a', 'b'];</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['1', '2'];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-Array-from-中使用箭头函数"><a href="#在-Array-from-中使用箭头函数" class="headerlink" title="在 Array.from 中使用箭头函数"></a>在 Array.from 中使用箭头函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [2, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><h3 id="用于确定传递的值是否是一个-Array"><a href="#用于确定传递的值是否是一个-Array" class="headerlink" title="用于确定传递的值是否是一个 Array"></a>用于确定传递的值是否是一个 Array</h3><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>如果值是 Array，则为true; 否则为false</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 下面的函数调用都返回 true</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 其实 Array.prototype 也是一个数组。</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下面的函数调用都返回 false</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token string">'Array'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> __proto__<span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><h3 id="方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型"><a href="#方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型" class="headerlink" title="方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型"></a>方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</h3><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>新的 Array 实例。</p><blockquote><p>Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组)</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// [7]</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1]</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// [ , , , , , , ]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Array-concat"><a href="#Array-concat" class="headerlink" title="Array.concat()"></a>Array.concat()</h2><h3 id="用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组"><a href="#用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组" class="headerlink" title="用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组"></a>用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组</h3><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><p>新的 Array 实例</p><h4 id="连接两个数组"><a href="#连接两个数组" class="headerlink" title="连接两个数组"></a>连接两个数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> hu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> yi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>hu<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>yi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['a', 'b', 'c', 1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="连接三个数组"><a href="#连接三个数组" class="headerlink" title="连接三个数组"></a>连接三个数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> hu1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hu2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    hu3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> huyi <span class="token operator">=</span> hu1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>hu2<span class="token punctuation">,</span> hu3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huyi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将值连接到数组"><a href="#将值连接到数组" class="headerlink" title="将值连接到数组"></a>将值连接到数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> hu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> huyi <span class="token operator">=</span> hu<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>huyi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ['a', 'b', 'c', 1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并嵌套数组"><a href="#合并嵌套数组" class="headerlink" title="合并嵌套数组"></a>合并嵌套数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> num3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> nums <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [[1], 2, [3]]</span><span class="token keyword">var</span> nums2<span class="token operator">=</span>num1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token comment">// [[1], 4, 5,[6]]</span>num1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [[1, 4], 2, [3]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h2><h3 id="方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度"><a href="#方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度" class="headerlink" title="方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度"></a>方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>arr.copyWithin(target[, start[, end]])</p></blockquote><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><strong>target</strong>  </p><p>0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。<br>如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。</p><p><strong>start</strong>  </p><p>0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。<br>如果 start 被忽略，copyWithin 将会从0开始复制。</p><p><strong>end</strong>  </p><p>0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。<br>如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）。</p><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h4><p>改变后的数组。</p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>参数 target、start 和 end 必须为整数。  </p><p>如果 start 为负，则其指定的索引位置等同于 length+start，length 为数组的长度。end 也是如此。  </p><p>copyWithin 方法不要求其 this 值必须是一个数组对象；除此之外，copyWithin 是一个可变方法，它可以改变 this 对象本身，并且返回它，而不仅仅是它的拷贝。  </p><p>copyWithin 就像 C 和 C++ 的 memcpy 函数一样，且它是用来移动 Array 或者 TypedArray 数据的一个高性能的方法。复制以及粘贴序列这两者是为一体的操作;即使复制和粘贴区域重叠，粘贴的序列也会有拷贝来的值。  </p><p>copyWithin 函数被设计为通用式的，其不要求其 this 值必须是一个数组对象。  </p><p>copyWithin 是一个可变方法，它不会改变 this 的长度 length，但是会改变 this 本身的内容，且需要时会创建新的属性。  </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// [1, 2, 3, 1, 2]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// [4, 5, 3, 4, 5]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// [4, 2, 3, 4, 5]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// [1, 2, 3, 3, 4]</span><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 将索引第3处的元素复制到索引第0处</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["d", "b", "c", "d", "e"]</span><span class="token comment">// 将索引3中的所有元素复制到索引1末尾</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ["d", "d", "e", "d", "e"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一遍看,虽然抄写下来，但是无法理解😅此方法</p></blockquote><h2 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h2><h3 id="返回一个新的Array-Iterator对象，该对象包含数组中每个索引的键-值对"><a href="#返回一个新的Array-Iterator对象，该对象包含数组中每个索引的键-值对" class="headerlink" title="返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对"></a>返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> iterator1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [0, "a"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: Array [1, "b"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h4><p>一个新的 Array 迭代器对象。<strong>Array Iterator是对象</strong>，它的原型<code>（__proto__:Array Iterator）</code>上有一个next方法，可用用于遍历迭代器取得原数组的<code>[key,value]</code></p><h4 id="Array-Iterator"><a href="#Array-Iterator" class="headerlink" title="Array Iterator"></a>Array Iterator</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Array Iterator是对象</span><span class="token comment">/*Array Iterator &#123;&#125;         __proto__:Array Iterator         next:ƒ next()         Symbol(Symbol.toStringTag):"Array Iterator"         __proto__:Object*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iterator-next"><a href="#iterator-next" class="headerlink" title="iterator.next()"></a>iterator.next()</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*&#123;value: Array(2), done: false&#125;          done:false          value:(2) [0, "a"]           __proto__: Object*/</span><span class="token comment">// iterator.next()返回一个对象，对于有元素的数组，</span><span class="token comment">// 是next&#123; value: Array(2), done: false &#125;；</span><span class="token comment">// next.done 用于指示迭代器是否完成：在每次迭代时进行更新而且都是false，</span><span class="token comment">// 直到迭代器结束done才是true。</span><span class="token comment">// next.value是一个["key","value"]的数组，是返回的迭代器中的元素值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iterator-next方法运行"><a href="#iterator-next方法运行" class="headerlink" title="iterator.next方法运行"></a>iterator.next方法运行</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> iter <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// for(var i=0; i&lt; arr.length; i++)&#123;   // 实际使用的是这个</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 注意，是length+1，比数组的长度大</span>    <span class="token keyword">var</span> tem <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 每次迭代时更新next</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 这里可以看到更新后的done都是false</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span>done <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token comment">// 遍历迭代器结束done才是true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tem<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tem<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 遍历完毕，输出next.value的数组</span><span class="token comment">// false</span><span class="token comment">// Array [0, "a"]</span><span class="token comment">// Array [1, "b"]</span><span class="token comment">// false</span><span class="token comment">// Array [2, "c"]</span><span class="token comment">// true</span><span class="token comment">// Array [Array [0, "a"], Array [1, "b"], Array [2, "c"]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二维数组按行排序"><a href="#二维数组按行排序" class="headerlink" title="二维数组按行排序"></a>二维数组按行排序</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sortArr</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> goNext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> entries <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>goNext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done <span class="token operator">!==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            goNext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            goNext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4567</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sortArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (4) [Array(2), Array(5), Array(5), Array(4)]</span><span class="token comment">// 0: (2) [1, 34]</span><span class="token comment">// 1: (5) [2, 3, 44, 234, 456]</span><span class="token comment">// 2: (5) [1, 4, 5, 6, 4567]</span><span class="token comment">// 3: (4) [1, 23, 34, 78]</span><span class="token comment">// length: 4</span><span class="token comment">// __proto__: Array(0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用for…of-循环"><a href="#使用for…of-循环" class="headerlink" title="使用for…of 循环"></a>使用for…of 循环</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> e <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// [0, "a"]</span><span class="token comment">// [1, "b"]</span><span class="token comment">// [2, "c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><h3 id="测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值"><a href="#测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值" class="headerlink" title="测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值"></a>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值</h3><blockquote><p><strong>注意</strong>：若收到一个空数组，此方法在一切情况下都会返回 true。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac查看本机ip地址</title>
      <link href="2020/11/25/Mac%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80/"/>
      <url>2020/11/25/Mac%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>终端输入：<code>ifconfig</code></p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201125184412.png" alt="终端" loading="lazy"></p><h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>终端下输入：<code>ifconfig | grep &quot;inet&quot;</code></p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201125184552.png" alt="终端" loading="lazy"></p><h2 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h2><p>系统偏好设置–网络–高级-ipv4地址</p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201125184920.png" alt="终端" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过命令行打开VScode</title>
      <link href="2020/11/23/%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80VScode/"/>
      <url>2020/11/23/%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80VScode/</url>
      
        <content type="html"><![CDATA[<ol><li><p>打开vscode，MAC用户按住<code>command+p</code>,此时会弹出一个窗口,然后按<code>F1</code></p></li><li><p>搜索<code>install code command</code></p></li><li><p>点击执行，会在右下角提示已经在path中安装了shell命令“code”</p></li><li><p>此时在命令行输入<code>code ./</code>就会在vscode打开当前目录</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iterm2快捷键弹出悬浮命令行</title>
      <link href="2020/11/23/iterm2%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%BC%B9%E5%87%BA%E6%82%AC%E6%B5%AE%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>2020/11/23/iterm2%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%BC%B9%E5%87%BA%E6%82%AC%E6%B5%AE%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<ol><li>打开iterm2之后点击图示选项打开偏好设置界面。</li></ol><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201123131413.png" alt="图片" loading="lazy"></p><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201123131617.png" alt="图片" loading="lazy"></p><ol start="2"><li>进入偏好设置界面选择Keys进入到键盘设置。然后点击创建新的热键窗口按钮。</li></ol><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201123131825.png" alt="图片" loading="lazy"></p><ol start="3"><li>在弹出的热键设置界面点击热键提示后面的设置按钮，设置自己需要的热键。</li></ol><blockquote><p>注意： 热键设置完成之后不要急着点击确定，如果需要窗口悬浮还的勾选<code>Floating window</code>勾选框，然后点击确定。</p></blockquote><p><img src="https://gitee.com/hy0916/PictureBed/raw/master/20201123131932.png" alt="图片" loading="lazy"></p><ol start="4"><li>然后我们测试下设置的效果，在其他的窗口下使用刚才设置的热键，在窗口上方会显示出一个透明的iterm命令行界面，我们可以快速输入命令行，新的悬浮窗口是默认的透明度的，我们可以在偏好设置界面根据自己的需要设置。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iterm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js变量转换为数值</title>
      <link href="2020/11/20/js%E5%8F%98%E9%87%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%80%BC/"/>
      <url>2020/11/20/js%E5%8F%98%E9%87%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>这三种 JavaScript 方法可用于将变量转换为数字：</p><ol><li>Number() 方法</li><li>parseInt() 方法</li><li>parseFloat() 方法<br>这些方法并非数字方法，而是全局 JavaScript 方法</li></ol><h2 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h2><p>JavaScript 全局方法可用于所有 JavaScript 数据类型。<br>这些是在处理数字时最相关的方法：</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Number()</td><td align="left">返回数字，由其参数转换而来。</td></tr><tr><td align="left">parseFloat()</td><td align="left">解析其参数并返回浮点数。</td></tr><tr><td align="left">parseInt()</td><td align="left">解析其参数并返回整数。</td></tr></tbody></table><h2 id="Number-方法"><a href="#Number-方法" class="headerlink" title="Number() 方法"></a>Number() 方法</h2><p>Number() 可用于把 JavaScript 变量转换为数值</p><h2 id="用于日期的-Number-方法"><a href="#用于日期的-Number-方法" class="headerlink" title="用于日期的 Number() 方法"></a>用于日期的 Number() 方法</h2><p>Number() 还可以把日期转换为数字</p><h2 id="parseInt-方法"><a href="#parseInt-方法" class="headerlink" title="parseInt() 方法"></a>parseInt() 方法</h2><p>parseInt() 解析一段字符串并返回数值。允许空格。只返回首个数字<br>如果无法转换为数值，则返回 NaN (Not a Number)</p><h2 id="parseFloat-方法"><a href="#parseFloat-方法" class="headerlink" title="parseFloat() 方法"></a>parseFloat() 方法</h2><p>parseFloat() 解析一段字符串并返回数值。允许空格。只返回首个数字<br>如果无法转换为数值，则返回 NaN (Not a Number)。</p><h2 id="数值属性"><a href="#数值属性" class="headerlink" title="数值属性"></a>数值属性</h2><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">MAX_VALUE</td><td align="left">返回 JavaScript 中可能的最大数。</td></tr><tr><td align="left">MIN_VALUE</td><td align="left">返回 JavaScript 中可能的最小数。</td></tr><tr><td align="left">NEGATIVE_INFINITY</td><td align="left">表示负的无穷大（溢出返回）。</td></tr><tr><td align="left">NaN</td><td align="left">表示非数字值（”Not-a-Number”）。</td></tr><tr><td align="left">POSITIVE_INFINITY</td><td align="left">表示无穷大（溢出返回）。</td></tr></tbody></table><h2 id="JavaScript-MIN-VALUE-和-MAX-VALUE"><a href="#JavaScript-MIN-VALUE-和-MAX-VALUE" class="headerlink" title="JavaScript MIN_VALUE 和 MAX_VALUE"></a>JavaScript MIN_VALUE 和 MAX_VALUE</h2><ul><li>MAX_VALUE 返回 JavaScript 中可能的最大数字。</li><li>MIN_VALUE 返回 JavaScript 中可能的最小数字。</li></ul><h2 id="JavaScript-NaN-非数字"><a href="#JavaScript-NaN-非数字" class="headerlink" title="JavaScript NaN - 非数字"></a>JavaScript NaN - 非数字</h2><p>NaN 属于 JavaScript 保留字，指示数字并非合法的数字。<br>尝试使用非数字字符串进行算术运算将导致 NaN（非数字）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token string">"Apple"</span><span class="token punctuation">;</span>  <span class="token comment">// x 将是 NaN (Not a Number)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数字属性不可用于变量"><a href="#数字属性不可用于变量" class="headerlink" title="数字属性不可用于变量"></a>数字属性不可用于变量</h2><ul><li>数字属性属于名为 number 的 JavaScript 数字对象包装器。   </li><li>这些属性只能作为 Number.MAX_VALUE 访问。   </li><li>使用 myNumber.MAX_VALUE，其中 myNumber 是变量、表达式或值，将返回 undefined   </li></ul><h2 id="JavaScript-数组"><a href="#JavaScript-数组" class="headerlink" title="JavaScript 数组"></a>JavaScript 数组</h2><ul><li>JavaScript 数组用于在单一变量中存储多个值。</li><li>数组是一种特殊的变量，它能够一次存放一个以上的值。</li><li>数组可以用一个单一的名称存放很多值，并且还可以通过引用索引号来访问这些值。</li></ul><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><ul><li>我们通过引用索引号（下标号）来引用某个数组元素。</li><li>这条语句访问 cars 中的首个元素的值</li><li>[0] 是数组中的第一个元素。[1] 是第二个。数组索引从 0 开始。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span> <span class="token string">"Volvo"</span><span class="token punctuation">,</span> <span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="改变数组元素"><a href="#改变数组元素" class="headerlink" title="改变数组元素"></a>改变数组元素</h2><p>这条语句修改了 cars 中第一个元素的值：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span> <span class="token string">"Volvo"</span><span class="token punctuation">,</span> <span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Opel"</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> cars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="访问完整数组"><a href="#访问完整数组" class="headerlink" title="访问完整数组"></a>访问完整数组</h2><p>通过 JavaScript，可通过引用数组名来访问完整数组：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span> <span class="token string">"Volvo"</span><span class="token punctuation">,</span> <span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> cars<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数组是对象"><a href="#数组是对象" class="headerlink" title="数组是对象"></a>数组是对象</h2><ul><li>数组是一种特殊类型的对象。在 JavaScript 中对数组使用 typeof 运算符会返回 “object”。  </li><li>但是，JavaScript 数组最好以数组来描述。  </li><li>数组使用数字来访问其“元素”。  </li></ul><h2 id="数组元素可以是对象"><a href="#数组元素可以是对象" class="headerlink" title="数组元素可以是对象"></a>数组元素可以是对象</h2><ul><li>JavaScript 变量可以是对象。数组是特殊类型的对象。</li><li>正因如此，您可以在相同数组中存放不同类型的变量。</li><li>您可以在数组保存对象。您可以在数组中保存函数。你甚至可以在数组中保存数组</li></ul><h2 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h2><ul><li>length 属性返回数组的长度（数组元素的数目）。</li><li>length 属性始终大于最高数组索引（下标）。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">*</span> 访问第一个数组元素fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> first <span class="token operator">=</span> fruits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">*</span> 访问最后一个数组元素fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> last <span class="token operator">=</span> fruits<span class="token punctuation">[</span>fruits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h2><ul><li>遍历数组的最安全方法是使用 “for” 循环：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits<span class="token punctuation">,</span> text<span class="token punctuation">,</span> fLen<span class="token punctuation">,</span> i<span class="token punctuation">;</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fLen <span class="token operator">=</span> fruits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>text <span class="token operator">=</span> <span class="token string">"&lt;ul>"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     text <span class="token operator">+=</span> <span class="token string">"&lt;li>"</span> <span class="token operator">+</span> fruits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您也可以使用 Array.foreach() 函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits<span class="token punctuation">,</span> text<span class="token punctuation">;</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>text <span class="token operator">=</span> <span class="token string">"&lt;ul>"</span><span class="token punctuation">;</span>fruits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>myFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>text <span class="token operator">+=</span> <span class="token string">"&lt;/ul>"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  text <span class="token operator">+=</span> <span class="token string">"&lt;li>"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"&lt;/li>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加数组元素"><a href="#添加数组元素" class="headerlink" title="添加数组元素"></a>添加数组元素</h2><ol><li><p>向数组添加新元素的最佳方法是使用 push() 方法</p></li><li><p>length 属性向数组添加新元素</p></li><li><p><strong>添加最高索引的元素可在数组中创建未定义的“洞”</strong></p></li></ol><h2 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h2><ul><li>很多编程元素支持命名索引的数组。  </li><li>具有命名索引的数组被称为关联数组（或散列）。  </li><li>JavaScript 不支持命名索引的数组。  </li><li>在 JavaScript 中，数组只能使用数字索引。  </li></ul><h2 id="数组和对象的区别"><a href="#数组和对象的区别" class="headerlink" title="数组和对象的区别"></a>数组和对象的区别</h2><ul><li>在 JavaScript 中，<strong>数组使用数字索引</strong>。</li><li>在 JavaScript 中，<strong>对象使用命名索引</strong>。</li><li>数组是特殊类型的对象，具有数字索引。</li></ul><h2 id="何时使用数组，何时使用对象"><a href="#何时使用数组，何时使用对象" class="headerlink" title="何时使用数组，何时使用对象"></a>何时使用数组，何时使用对象</h2><ul><li>JavaScript 不支持关联数组</li><li>如果希望元素名为字符串（文本）则应该使用对象。</li><li>如果希望元素名为数字则应该使用数组。</li></ul><h2 id="避免-new-Array"><a href="#避免-new-Array" class="headerlink" title="避免 new Array()"></a>避免 new Array()</h2><ul><li>没有必要使用 JavaScript 的内建数组构造器 new Array()。</li><li><strong>请使用 [] 取而代之！</strong><br>下面两条不同的语句创建了名为 points 的新的空数组：</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 差</span><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// 优</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面两条不同的语句创建包含六个数字的新数组：   </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 差</span><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// 优</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>new 关键词只会使代码复杂化。它还会产生某些不可预期的结果</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建包含两个元素的数组（40 和 100）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假如删除其中一个元素会怎么样？</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 创建包含 40 个未定义元素的数组！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如何识别数组"><a href="#如何识别数组" class="headerlink" title="如何识别数组"></a>如何识别数组</h2><p>常见的问题是：我如何知晓某个变量是否是数组？<br>问题在于 JavaScript 运算符 typeof 返回 “object”：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> fruits<span class="token punctuation">;</span>             <span class="token comment">// 返回 object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>typeof 运算符返回 “object”，因为 JavaScript 数组属于对象。</p><p>解决方案 1：<br>为了解决这个问题，ECMAScript 5 定义了新方法 Array.isArray()：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此方案的问题在于 ECMAScript 5 不支持老的浏览器。</p><p>解决方案 2：<br>创建您自己的 isArray() 函数以解决此问题：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Array"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如参数为数组，则上面的函数始终返回 true。</p><p>或者更准确的解释是：假如对象原型包含单词 “Array” 则返回 true。</p><p>解决方案 3：<br>假如对象由给定的构造器创建，则 instanceof 运算符返回 true：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Mango"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fruits <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>     <span class="token comment">// 返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中函数防抖和节流</title>
      <link href="2020/11/17/js%E4%B8%AD%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>2020/11/17/js%E4%B8%AD%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>在前端开发的过程中，我们经常会需要绑定一些持续触发的事件，如 resize、scroll、mousemove 等等，但有些时候我们并不希望在事件持续触发的过程中那么频繁地去执行函数。</p><p>通常这种情况下我们怎么去解决的呢？一般来讲，防抖和节流是比较好的解决方案。</p><p>让我们先来看看在事件持续触发的过程中频繁执行函数是怎样的一种情况。</p><p>html 文件中代码如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span> style<span class="token operator">=</span><span class="token string">"height:150px;line-height:150px;text-align:center; color: #fff;background-color:#ccc;font-size:80px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        content<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    content<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> count<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，div 元素绑定了 mousemove 事件，当鼠标在 div（灰色）区域中移动的时候会持续地去触发该事件导致频繁执行函数。效果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4842858-652a8eb5c73db0c7.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" loading="lazy"></p><p>可以看到，在没有通过其它操作的情况下，函数被频繁地执行导致页面上数据变化特别快。所以，接下来让我们来看看防抖和节流是如何去解决这个问题的。</p><h3 id="防抖（debounce）"><a href="#防抖（debounce）" class="headerlink" title="防抖（debounce）"></a>防抖（debounce）</h3><h3 id="所谓防抖，就是指触发事件后在-n-秒内函数只能执行一次，如果在-n-秒内又触发了事件，则会重新计算函数执行时间。"><a href="#所谓防抖，就是指触发事件后在-n-秒内函数只能执行一次，如果在-n-秒内又触发了事件，则会重新计算函数执行时间。" class="headerlink" title="所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。"></a>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</h3><p>防抖函数分为非立即执行版和立即执行版。</p><p>非立即执行版：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非立即执行版的意思是触发事件后函数不会立即执行，而是在 n 秒后执行，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p><p>我们依旧使用上述绑定 mousemove 事件的例子，通过上面的防抖函数，我们可以这么使用</p><pre class="line-numbers language-none"><code class="language-none">content.onmousemove &#x3D; debounce(count,1000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4842858-1f6389b9dd9e5ef9.gif?imageMogr2/auto-orient/" loading="lazy"></p><p>可以看到，在触发事件后函数 1 秒后才执行，而如果我在触发事件后的 1 秒内又触发了事件，则会重新计算函数执行时间。<br>上述防抖函数的代码还需要注意的是 this 和 参数的传递</p><pre class="line-numbers language-none"><code class="language-none">let context &#x3D; this;let args &#x3D; arguments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>防抖函数的代码使用这两行代码来获取 this 和 参数，是为了让 debounce 函数最终返回的函数 this 指向不变以及依旧能接受到 e 参数。<br>立即执行版：<br>function debounce(func,wait) {<br>    let timeout;<br>    return function () {<br>        let context = this;<br>        let args = arguments;</p><pre><code>    if (timeout) clearTimeout(timeout);    let callNow = !timeout;    timeout = setTimeout(() =&gt; &#123;        timeout = null;    &#125;, wait)    if (callNow) func.apply(context, args)&#125;</code></pre><p>}</p><p>立即执行版的意思是触发事件后函数会立即执行，然后 n 秒内不触发事件才能继续执行函数的效果。<br>使用方法同上，效果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4842858-067785c056f182d8.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" loading="lazy"></p><p>在开发过程中，我们需要根据不同的场景来决定我们需要使用哪一个版本的防抖函数，一般来讲上述的防抖函数都能满足大部分的场景需求。但我们也可以将非立即执行版和立即执行版的防抖函数结合起来，实现最终的双剑合璧版的防抖函数。</p><p>双剑合璧版：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @desc 函数防抖 * @param func 函数 * @param wait 延迟执行毫秒数 * @param immediate true 表立即执行，false 表非立即执行 *&#x2F;function debounce(func,wait,immediate) &#123;    let timeout;    return function () &#123;        let context &#x3D; this;        let args &#x3D; arguments;        if (timeout) clearTimeout(timeout);        if (immediate) &#123;            var callNow &#x3D; !timeout;            timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;                timeout &#x3D; null;            &#125;, wait)            if (callNow) func.apply(context, args)        &#125;        else &#123;            timeout &#x3D; setTimeout(function()&#123;                func.apply(context, args)            &#125;, wait);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流（throttle）"><a href="#节流（throttle）" class="headerlink" title="节流（throttle）"></a>节流（throttle）</h3><h3 id="所谓节流，就是指连续触发事件但是在-n-秒中只执行一次函数。"><a href="#所谓节流，就是指连续触发事件但是在-n-秒中只执行一次函数。" class="headerlink" title="所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。"></a>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。</h3><p>节流会稀释函数的执行频率。</p><p>对于节流，一般有两种方式可以实现，分别是时间戳版和定时器版。</p><p>时间戳版：</p><pre class="line-numbers language-none"><code class="language-none">function throttle(func, wait) &#123;    let previous &#x3D; 0;    return function() &#123;        let now &#x3D; Date.now();        let context &#x3D; this;        let args &#x3D; arguments;        if (now - previous &gt; wait) &#123;            func.apply(context, args);            previous &#x3D; now;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方式如下</p><pre class="line-numbers language-none"><code class="language-none">content.onmousemove &#x3D; throttle(count,1000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4842858-80423b8898a27732.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" loading="lazy"></p><p>可以看到，在持续触发事件的过程中，函数会立即执行，并且每 1s 执行一次。</p><p>定时器版:</p><pre class="line-numbers language-none"><code class="language-none">function throttle(func, wait) &#123;    let timeout;    return function() &#123;        let context &#x3D; this;        let args &#x3D; arguments;        if (!timeout) &#123;            timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;                timeout &#x3D; null;                func.apply(context, args)            &#125;, wait)        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方式同上，效果如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4842858-bf2ed4c8ed4f0ec0.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" loading="lazy"></p><p>可以看到，在持续触发事件的过程中，函数不会立即执行，并且每 1s 执行一次，在停止触发事件后，函数还会再执行一次。</p><p>我们应该可以很容易的发现，其实时间戳版和定时器版的节流函数的区别就是，时间戳版的函数触发是在时间段内开始的时候，而定时器版的函数触发是在时间段内结束的时候。</p><p>同样地，我们也可以将时间戳版和定时器版的节流函数结合起来，实现双剑合璧版的节流函数。<br>双剑合璧版:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @desc 函数节流 * @param func 函数 * @param wait 延迟执行毫秒数 * @param type 1 表时间戳版，2 表定时器版 *&#x2F;function throttle(func, wait ,type) &#123;    if(type&#x3D;&#x3D;&#x3D;1)&#123;        let previous &#x3D; 0;    &#125;else if(type&#x3D;&#x3D;&#x3D;2)&#123;        let timeout;    &#125;    return function() &#123;        let context &#x3D; this;        let args &#x3D; arguments;        if(type&#x3D;&#x3D;&#x3D;1)&#123;            let now &#x3D; Date.now();            if (now - previous &gt; wait) &#123;                func.apply(context, args);                previous &#x3D; now;            &#125;        &#125;else if(type&#x3D;&#x3D;&#x3D;2)&#123;            if (!timeout) &#123;                timeout &#x3D; setTimeout(() &#x3D;&gt; &#123;                    timeout &#x3D; null;                    func.apply(context, args)                &#125;, wait)            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 中 this 在各个场景下的指向</title>
      <link href="2020/11/17/JS%E4%B8%ADthis%E5%9C%A8%E5%90%84%E4%B8%AA%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8C%87%E5%90%91/"/>
      <url>2020/11/17/JS%E4%B8%ADthis%E5%9C%A8%E5%90%84%E4%B8%AA%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-this-的奥秘"><a href="#1-this-的奥秘" class="headerlink" title="1. this 的奥秘"></a>1. this 的奥秘</h2><p>很多时候, JS 中的 this 对于咱们的初学者很容易产生困惑不解。 this 的功能很强大，但需要一定付出才能慢慢理解它。</p><p>对Java、PHP或其他标准语言来看，this 表示类方法中当前对象的实例。大多数情况下，this 不能在方法之外使用，这样就比较不会造成混淆。</p><p>在J要中情况就有所不同: this表示函数的当前执行上下文，JS 中函数调用主要有以下几种方式：</p><ul><li>函数调用: alert(‘Hello World!’)</li><li>方法调用: console.log(‘Hello World!’)</li><li>构造函数: new RegExp(‘\d’)</li><li>隐式调用: alert.call(undefined, ‘Hello World!’)<br>每种调用类型以自己的方式定义上下文，所以就很容易产生混淆。</li></ul><p>此外，严格模式也会影响执行上下文。</p><p>理解this关键是要清楚的知道函数调用及其如何影响上下文。</p><p>本文主要说明函数的调用方式及如何影响 this，并且说明执行上下文的常见陷阱。</p><p>在开始之前，先知道几个术语：</p><p>调用函数正在执行创建函数体的代码，或者只是调用函数。 例如，parseInt函数调用是parseInt（’15’）。</p><ul><li>函数调用：执行构成函数主体的代码：例如，parseInt函数调用是parseInt(‘15’)。</li><li>调用的上下文：指 this 在函数体内的值。 例如，map.set(‘key’, ‘value’)的调用上下文是 map。</li><li>函数的作用域：是在函数体中可访问的变量、对象和函数的集合。</li></ul><h2 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2.函数调用"></a>2.函数调用</h2><p>当一个表达式为函数接着一个(，一些用逗号分隔的参数以及一个）时，函数调用被执行，例如parseInt(‘18’)。</p><p>函数调用表达式不能是属性方式的调用，如 obj.myFunc()，这种是创建一个方法调用。再如 [1,5].join(‘,’)不是函数调用，而是方法调用，这种区别需要记住哈，很重要滴。</p><p>函数调用的一个简单示例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'Hello '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数调用</span><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'Hello World!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hello(‘World’)是函数调用: hello表达式等价于一个函数，跟在它后面的是一对括号以及’World’参数。</p><p>一个更高级的例子是IIFE(立即调用的函数表达式)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token string">'Hello '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token comment">// => 'Hello World!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>IIFE也是一个函数调用:第一对圆括号(function(name) {…})是一个表达式，它的计算结果是一个函数对象，后面跟着一对圆括号，圆括号的参数是“World”。</p><h3 id="2-1-在函数调用中的this"><a href="#2-1-在函数调用中的this" class="headerlink" title="2.1. 在函数调用中的this"></a>2.1. 在函数调用中的this</h3><blockquote><p>this 在函数调用中是一个全局对象<br>局对象由执行环境决定。在浏览器中，this是 window 对象。</p></blockquote><p>在函数调用中，执行上下文是全局对象。</p><p>再来看看下面函数中的上下文又是什么鬼：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>myNumber <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 将'myNumber'属性添加到全局对象</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// sum() is invoked as a function</span><span class="token comment">// sum() 中的 `this` 是一个全局对象（window）</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => 31</span>window<span class="token punctuation">.</span>myNumber<span class="token punctuation">;</span> <span class="token comment">// => 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用sum(15,16)时，JS 自动将this设置为全局对象，在浏览器中该对象是window。</p><p>当this在任何函数作用域(最顶层作用域:全局执行上下文)之外使用，this 表示 window 对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token keyword">this</span><span class="token punctuation">.</span>myString <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>myString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'Hello World!'</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> In an html file <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-严格模式下的函数调用-this-又是什么样的"><a href="#2-2-严格模式下的函数调用-this-又是什么样的" class="headerlink" title="2.2 严格模式下的函数调用 this 又是什么样的"></a>2.2 严格模式下的函数调用 this 又是什么样的</h3><blockquote><p>this 在严格模式下的函数调用中为 undefined</p></blockquote><p>严格模式是在 ECMAScript 5.1中引入的，它提供了更好的安全性和更强的错误检查。</p><p>要启用严格模式，函数头部写入use strict 即可。</p><p>启用后，严格模式会影响执行上下文，this 在常规函数调用中值为undefined。 与上述情况2.1相反，执行上下文不再是全局对象。</p><p>严格模式函数调用示例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span> <span class="token comment">// 启用严格模式</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当multiply(2,5)作为函数调用时，this是undefined。</p><p>严格模式不仅在当前作用域中有效，在内部作用域中也是有效的(对于在内部声明的所有函数):</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token string">'use strict'</span><span class="token punctuation">;</span> <span class="token comment">// 开启严格模式  </span>   <span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 严格模式仍然有效  </span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>     <span class="token keyword">return</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// concat() 在严格模式下作为函数调用</span>   <span class="token comment">// this in concat() is undefined</span>   <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">' World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "Hello World!"</span><span class="token punctuation">&#125;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‘use strict’被插入到执行体的顶部，在其作用域内启用严格模式。 因为函数concat是在执行的作用域中声明的，所以它继承了严格模式。</p><p>单个JS文件可能包含严格和非严格模式。 因此，对于相同的调用类型，可以在单个脚本中具有不同的上下文行为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">nonStrictSum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 非严格模式</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">strictSum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token comment">// 启用严格模式</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">nonStrictSum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 11</span><span class="token function">strictSum</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-陷阱-this-在内部函数中的时候"><a href="#2-3-陷阱-this-在内部函数中的时候" class="headerlink" title="2.3 陷阱:this 在内部函数中的时候"></a>2.3 陷阱:this 在内部函数中的时候</h3><p>函数调用的一个常见陷阱是，认为this在内部函数中的情况与外部函数中的情况相同。</p><p>正确地说，内部函数的上下文只依赖于它的调用类型，而不依赖于外部函数的上下文。</p><p>要将 this 设置为所需的值，可以通过 .call()或.apply()修改内部函数的上下文或使用.bind()创建绑定函数。</p><p>下面的例子是计算两个数的和：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   numberA<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>   numberB<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>   <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>     <span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => false</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberA <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sum()是对象上的方法调用，所以sum中的上下文是numbers对象。calculate函数是在sum中定义的，你可能希望在calculate()中this也表示number对象。</p><p>calculate()是一个函数调用(不是方法调用)，它将this作为全局对象window(非严格模下)。即使外部函数sum将上下文作为number对象，它在calculate里面没有影响。</p><p>sum()的调用结果是NaN，不是预期的结果5 + 10 = 15，这都是因为没有正确调用calculate。</p><p>为了解决这个问题，calculate函数中上下文应该与 sum 中的一样，以便可以访问numberA和numberB属性。</p><p>一种解决方案是通过调用calculator.call(this)手动将calculate上下文更改为所需的上下文。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   numberA<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>   numberB<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>   <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>     <span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberA <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 使用 .call() 方法修改上下文</span>     <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>call(this)像往常一样执行calculate函数，但 call 会把上下文修改为指定为第一个参数的值。</p><p>现在this.numberA + this.numberB相当于numbers.numberA + numbers.numberB。 该函数返回预期结果5 + 10 = 15。</p><p>另一种就是使用箭头函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   numberA<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>   numberB<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>   <span class="token function-variable function">sum</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>     <span class="token keyword">const</span> <span class="token function-variable function">calculate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberA <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberB<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-方法调用"><a href="#3-方法调用" class="headerlink" title="3.方法调用"></a>3.方法调用</h2><p>方法是存储在对象属性中的函数。例如</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// helloFunction 是一个方法</span>  <span class="token function-variable function">helloFunction</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> message <span class="token operator">=</span> myObject<span class="token punctuation">.</span><span class="token function">helloFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>helloFunction是myObject的一个方法，要调用该方法，可以这样子调用 :myObject.helloFunction。</p><p>当一个表达式以属性访问的形式执行时，执行的是方法调用，它相当于以个函数接着(，一组用逗号分隔的参数以及)。</p><p>利用前面的例子，myObject.helloFunction()是对象myObject上的一个helloFunction的方法调用。[1, 2].join(‘,’) 或/\s/.test(‘beautiful world’)也被认为是方法调用。</p><p>区分函数调用和方法调用非常重要，因为它们是不同的类型。主要区别在于方法调用需要一个属性访问器形式来调用函数<code>(obj.myFunc()或obj[&#39;myFunc&#39;]())</code>，而函数调用不需要(myFunc())。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法调用</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function-variable function">ten</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法调用</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function-variable function">myFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 方法调用</span><span class="token keyword">const</span> otherFunction <span class="token operator">=</span> obj<span class="token punctuation">.</span>myFunction<span class="token punctuation">;</span><span class="token function">otherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 函数调用</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'16.60'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数调用</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 函数调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解函数调用和方法调用之间的区别有助于正确识别上下文。</p><h3 id="3-1-方法调用中-this-是肿么样"><a href="#3-1-方法调用中-this-是肿么样" class="headerlink" title="3.1 方法调用中 this 是肿么样"></a>3.1 方法调用中 this 是肿么样</h3><p>在方法调用中，this是拥有这个方法的对象<br>当调用对象上的方法时，this就变成了对象本身。</p><p>创建一个对象，该对象有一个递增数字的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> calc <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  num<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> calc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// method invocation. this is calc</span>calc<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 1</span>calc<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用calc.increment()使increment函数的上下文成为calc对象。所以使用this.num来增加num属性是有效的。</p><p>再来看看另一个例子。JS对象从原型继承一个方法，当在对象上调用继承的方法时，调用的上下文仍然是对象本身</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myDog <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> myDog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Milo'</span><span class="token punctuation">;</span><span class="token comment">// 方法调用 this 指向 myDog</span>myDog<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'Milo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Object.create()创建一个新对象myDog，并根据第一个参数设置其原型。myDog对象继承sayName方法。</p><p>执行myDog. sayname()时，myDog是调用的上下文。</p><p>在EC6 class 语法中，方法调用上下文也是实例本身</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Planet</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> earth<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> earth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Planet</span><span class="token punctuation">(</span><span class="token string">'Earth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// method invocation. the context is earth</span>earth<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'Earth'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-陷阱-将方法与其对象分离"><a href="#3-2-陷阱-将方法与其对象分离" class="headerlink" title="3.2 陷阱:将方法与其对象分离"></a>3.2 陷阱:将方法与其对象分离</h3><p>方法可以从对象中提取到一个单独的变量const alone = myObj.myMethod。当方法单独调用时，与原始对象alone()分离，你可能认为当前的this就是定义方法的对象myObject。</p><p>如果方法在没有对象的情况下调用，那么函数调用就会发生，此时的this指向全局对象window严格模式下是undefined。</p><p>下面的示例定义了Animal构造函数并创建了它的一个实例:myCat。然后setTimout()在1秒后打印myCat对象信息</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> legs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> legs<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">logInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> myCat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => false</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">+</span> <span class="token string">' legs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// The undefined has undefined legs </span><span class="token function">setTimeout</span><span class="token punctuation">(</span>myCat<span class="token punctuation">.</span>logInfo<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能认为setTimout调用myCat.loginfo()时，它应该打印关于myCat对象的信息。</p><p>不幸的是，方法在作为参数传递时与对象是分离，setTimout(myCat.logInfo)以下情况是等效的：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimout</span><span class="token punctuation">(</span>myCat<span class="token punctuation">.</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价于</span><span class="token keyword">const</span> extractedLogInfo <span class="token operator">=</span> myCat<span class="token punctuation">.</span>logInfo<span class="token punctuation">;</span><span class="token function">setTimout</span><span class="token punctuation">(</span>extractedLogInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将分离的logInfo作为函数调用时，this是全局 window,所以对象信息没有正确地打印。</p><p>函数可以使用.bind()方法与对象绑定,就可以解决 this 指向的问题。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> legs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> legs<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">logInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> myCat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">+</span> <span class="token string">' legs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// logs "The Cat has 4 legs"</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>myCat<span class="token punctuation">.</span><span class="token function">logInfo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>myCat<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCat<span class="token punctuation">.</span><span class="token function">logInfo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>myCat<span class="token punctuation">)</span>返回一个新函数，它的执行方式与logInfo完全相同，但是此时的 <span class="token keyword">this</span> 指向 myCat，即使在函数调用中也是如此。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种解决方案是将logInfo()方法定义为一个箭头函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> legs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">=</span> legs<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">logInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> myCat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">+</span> <span class="token string">' has '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>legs <span class="token operator">+</span> <span class="token string">' legs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// logs "The Cat has 4 legs"</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>myCat<span class="token punctuation">.</span>logInfo<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-构造函数调用"><a href="#4-构造函数调用" class="headerlink" title="4. 构造函数调用"></a>4. 构造函数调用</h2><p>当new关键词紧接着函数对象,(,一组逗号分隔的参数以及)时被调用，执行的是构造函数调用如new RegExp(‘\d’)。</p><p>声明了一个Country函数，并且将它作为一个构造函数调用：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Country</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> traveled</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token string">'United Kingdom'</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>traveled <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>traveled<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Country</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">travel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>traveled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 构造函数调用</span><span class="token keyword">const</span> france <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">(</span><span class="token string">'France'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 构造函数调用</span><span class="token keyword">const</span> unitedKingdom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">;</span>france<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Travel to France</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new Country(‘France’, false)是Country函数的构造函数调用。它的执行结果是一个name属性为’France’的新的对象。 如果这个构造函数调用时不需要参数，那么括号可以省略：new Country。</p><p>从ES6开始，JS 允许用class关键词来定义构造函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> traveled</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>traveled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>traveled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Constructor invocation</span><span class="token keyword">const</span> paris <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">'Paris'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paris<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new City(‘Paris’)是构造函数调用。这个对象的初始化由这个类中一个特殊的方法constructor来处理。其中，this指向新创建的对象。</p><p>构造函数创建了一个新的空的对象，它从构造函数的原型继承了属性。构造函数的作用就是去初始化这个对象。 可能你已经知道了，在这种类型的调用中，上下文指向新创建的实例。</p><p>当属性访问myObject.myFunction前面有一个new关键词时，JS会执行构造函数调用而不是原来的方法调用。</p><p>例如new myObject.myFunction()：它相当于先用属性访问把方法提取出来extractedFunction = myObject.myFunction，然后利用把它作为构造函数创建一个新的对象： new extractedFunction()。</p><h3 id="4-1-构造函数中的-this"><a href="#4-1-构造函数中的-this" class="headerlink" title="4.1. 构造函数中的 this"></a>4.1. 构造函数中的 this</h3><p>在构造函数调用中 this 指向新创建的对象<br>构造函数调用的上下文是新创建的对象。它利用构造函数的参数初始化新的对象，设定属性的初始值，添加事件处理函数等等。</p><p>来看看下面示例中的上下文</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token string">'Default Value'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Constructor invocation</span><span class="token keyword">const</span> fooInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fooInstance<span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token comment">// => 'Default Value'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new Foo() 正在进行构造函数调用，其中上下文是fooInstance。 在Foo内部初始化对象：this.property被赋值为默认值。</p><p>同样的情况在用class语法（从ES6起）时也会发生，唯一的区别是初始化在constructor方法中进行:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Bar</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token string">'Default Value'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Constructor invocation</span><span class="token keyword">const</span> barInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>barInstance<span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token comment">// => 'Default Value'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-陷阱-忘了使用-new"><a href="#4-2-陷阱-忘了使用-new" class="headerlink" title="4.2. 陷阱: 忘了使用 new"></a>4.2. 陷阱: 忘了使用 new</h3><p>有些JS函数不是只在作为构造函数调用的时候才创建新的对象，作为函数调用时也会，例如RegExp：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> reg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\w+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> reg2 <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\w+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reg1 <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">;</span>      <span class="token comment">// => true</span>reg2 <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">;</span>      <span class="token comment">// => true</span>reg1<span class="token punctuation">.</span>source <span class="token operator">===</span> reg2<span class="token punctuation">.</span>source<span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行的 new RegExp(‘\w+’)和RegExp(‘\w+’)时，JS 会创建等价的正则表达式对象。</p><p>使用函数调用来创建对象存在一个潜在的问题(不包括工厂模式)，因为一些构造函数可能会忽略在缺少new关键字时初始化对象的逻辑。</p><p>下面的例子说明了这个问题：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> wheelsCount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>wheelsCount <span class="token operator">=</span> wheelsCount<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 忘记使用 new </span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token string">'Car'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>car<span class="token punctuation">.</span>type<span class="token punctuation">;</span>       <span class="token comment">// => 'Car'</span>car<span class="token punctuation">.</span>wheelsCount <span class="token comment">// => 4</span>car <span class="token operator">===</span> window  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vehicle是一个在上下文对象上设置type和wheelsCount属性的函数。</p><p>当执行Vehicle(‘Car’， 4)时，返回一个对象Car，它具有正确的属性:Car.type 为 Car和Car.wheelsCount 为4，你可能认为它很适合创建和初始化新对象。</p><p>然而，在函数调用中，this是window对象 ，因此 Vehicle（’Car’，4）在 window 对象上设置属性。 显然这是错误，它并没有创建新对象。</p><p>当你希望调用构造函数时，确保你使用了new操作符：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> wheelsCount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">'Error: Incorrect invocation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>wheelsCount <span class="token operator">=</span> wheelsCount<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Constructor invocation</span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token string">'Car'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>car<span class="token punctuation">.</span>type               <span class="token comment">// => 'Car'</span>car<span class="token punctuation">.</span>wheelsCount        <span class="token comment">// => 4</span>car <span class="token keyword">instanceof</span> <span class="token class-name">Vehicle</span> <span class="token comment">// => true</span><span class="token comment">// Function invocation. Throws an error.</span><span class="token keyword">const</span> brokenCar <span class="token operator">=</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token string">'Broken Car'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new Vehicle(‘Car’，4) 运行正常：创建并初始化一个新对象，因为构造函数调用中时使用了new关键字。</p><p>在构造函数里添加了一个验证this instanceof Vehicle来确保执行的上下文是正确的对象类型。如果this不是Vehicle，那么就会报错。这样，如果执行Vehicle(‘Broken Car’, 3)(没有new)，我们会得到一个异常：Error: Incorrect invocation。</p><h2 id="5-隐式调用"><a href="#5-隐式调用" class="headerlink" title="5. 隐式调用"></a>5. 隐式调用</h2><p>使用myFun.call()或myFun.apply()方法调用函数时，执行的是隐式调用。</p><p>JS中的函数是第一类对象，这意味着函数就是对象，对象的类型为Function。从函数对象的方法列表中，.call()和.apply()用于调用具有可配置上下文的函数。</p><p>方法 .call(thisArg[, arg1[, arg2[, …]]])将接受的第一个参数thisArg作为调用时的上下文，arg1, arg2, …这些则作为参数传入被调用的函数。<br>方法.apply(thisArg, [args])将接受的第一个参数thisArg作为调用时的上下文，并且接受另一个类似数组的对象[arg1, arg2, …] 作为被调用函数的参数传入。<br>下面是隐式调用的例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">++</span>number<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token function">increment</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// => 11</span><span class="token function">increment</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>increment.call()和increment.apply()都用参数10调用了这个自增函数。</p><p>两者的区别是.call()接受一组参数，例如myFunction.call(thisValue, ‘value1’, ‘value2’)。而.apply()接受的一组参数必须是一个类似数组的对象，例如myFunction.apply(thisValue, [‘value1’, ‘value2’])。</p><h3 id="5-1-隐式调用中的this"><a href="#5-1-隐式调用中的this" class="headerlink" title="5.1. 隐式调用中的this"></a>5.1. 隐式调用中的this</h3><p>在隐式调用.call()或.apply()中，this是第一个参数<br>很明显，在隐式调用中，this作为第一个参数传递给.call()或.apply()。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> rabbit <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'White Rabbit'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">concatName</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> rabbit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">return</span> string <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">concatName</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">,</span> <span class="token string">'Hello '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 'Hello White Rabbit'</span><span class="token function">concatName</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>rabbit<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bye '</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'Bye White Rabbit'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当应该使用特定上下文执行函数时，隐式调用非常有用。例如为了解决方法调用时，this总是window或严格模式下的undefined的上下文问题。隐式调用可以用于模拟在一个对象上调用某个方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Runner</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Rabbit</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> countLegs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Rabbit</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token function">Runner</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>countLegs <span class="token operator">=</span> countLegs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myRabbit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token string">'White Rabbit'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myRabbit<span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'White Rabbit', countLegs: 4 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rabbit中的Runner.call(this, name)隐式调用了父类的函数来初始化这个对象。</p><h2 id="6-绑定函数"><a href="#6-绑定函数" class="headerlink" title="6. 绑定函数"></a>6. 绑定函数</h2><p>绑定函数是与对象连接的函数。通常使用.bind()方法从原始函数创建。原始函数和绑定函数共享相同的代码和作用域，但执行时上下文不同。</p><p>方法 myFunc.bind(thisArg[, arg1[, arg2[, …]]])接受第一个参数thisArg作为绑定函数执行时的上下文，并且它接受一组可选的参数 arg1, arg2, …作为被调用函数的参数。它返回一个绑定了thisArg的新函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">*</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 6</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bind(2)返回一个新的函数对象double，double 绑定了数字2。multiply和double具有相同的代码和作用域。</p><p>与.apply()和.call() 方法相反，它不会立即调用该函数，.bind()方法只返回一个新函数，在之后被调用，只是this已经被提前设置好了。</p><h3 id="6-1-绑定函数中的this"><a href="#6-1-绑定函数中的this" class="headerlink" title="6.1. 绑定函数中的this"></a>6.1. 绑定函数中的this</h3><p>在调用绑定函数时，this是.bind()的第一个参数。<br>.bind()的作用是创建一个新函数，调用该函数时，将上下文作为传递给.bind()的第一个参数。它是一种强大的技术，使咱们可以创建一个定义了this值的函数。</p><p>来看看，如何在如何在绑定函数设置 this</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  array<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">getNumbers</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> boundGetNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">getNumbers</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">boundGetNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [3, 5, 10]</span><span class="token comment">// Extract method from object</span><span class="token keyword">const</span> simpleGetNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span>getNumbers<span class="token punctuation">;</span><span class="token function">simpleGetNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => undefined (严格模式下报错)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>numbers.getNumbers.bind(numbers)返回绑定numbers对象boundGetNumbers函数。boundGetNumbers()调用时的this是number对象，并能够返回正确的数组对象。</p><p>可以将函数numbers.getNumbers提取到变量simpleGetNumbers中而不进行绑定。在之后的函数调用中simpleGetNumbers()的this是window(严格模式下为undefined)，不是number对象。在这个情况下，simpleGetNumbers()不会正确返回数组。</p><h3 id="6-2-紧密的上下文绑定"><a href="#6-2-紧密的上下文绑定" class="headerlink" title="6.2 紧密的上下文绑定"></a>6.2 紧密的上下文绑定</h3><p>.bind()创建一个永久的上下文链接，并始终保持它。 一个绑定函数不能通过.call()或者.apply()来改变它的上下文，甚至是再次绑定也不会有什么作用。</p><p>只有绑定函数的构造函数调用才能更改已经绑定的上下文，但是很不推荐的做法(构造函数调用必须使用常规的非绑定函数)。</p><p>下面示例创建一个绑定函数，然后尝试更改其已预先定义好的上下文</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token string">'use strict'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token function">getThis</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定函数调用</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 1</span><span class="token comment">// 使用带有.apply()和.call()的绑定函数</span><span class="token function">one</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1</span><span class="token function">one</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 1</span><span class="token comment">// 再次绑定</span><span class="token function">one</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 1</span><span class="token comment">// 以构造函数的形式调用绑定函数</span><span class="token keyword">new</span> <span class="token class-name">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有new one()改变了绑定函数的上下文，其他方式的调用中this总是等于1。</p><h2 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7. 箭头函数"></a>7. 箭头函数</h2><p>箭头函数用于以更短的形式声明函数，并在词法上绑定上下文。它可以这样使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'Hello '</span> <span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'Hello World'</span><span class="token comment">// Keep only even numbers</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [2, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数语法简单，没有冗长的function 关键字。当箭头函数只有一条语句时，甚至可以省略return关键字。</p><p>箭头函数是匿名的，这意味着name属性是一个空字符串’’。这样它就没有词法上函数名(函数名对于递归、分离事件处理程序非常有用)</p><p>同时，跟常规函数相反，它也不提供arguments对象。但是，这在ES6中通过rest parameters修复了:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">sumArguments</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'undefined'</span>   <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> result <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>sumArguments<span class="token punctuation">.</span>name      <span class="token comment">// => ''</span><span class="token function">sumArguments</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-箭头函数中的this"><a href="#7-1-箭头函数中的this" class="headerlink" title="7.1. 箭头函数中的this"></a>7.1. 箭头函数中的this</h3><p>this 定义箭头函数的封闭上下文<br>箭头函数不会创建自己的执行上下文，而是从定义它的外部函数中获取 this。 换句话说，箭头函数在词汇上绑定 this。</p><p>下面的例子说明了这个上下文透明的特性：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> myPoint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> myPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// => true</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => '95:165'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> myPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myPoint<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setTimeout使用与log()方法相同的上下文(myPoint对象)调用箭头函数。正如所见，箭头函数从定义它的函数继承上下文。</p><p>如果在这个例子里尝试用常规函数,它创建自己的上下文(window或严格模式下的undefined)。因此，要使相同的代码正确地使用函数表达式，需要手动绑定上下文:setTimeout(function(){…}.bind(this))。这很冗长，使用箭头函数是一种更简洁、更短的解决方案。</p><p>如果箭头函数在最顶层的作用域中定义（在任何函数之外），则上下文始终是全局对象（浏览器中的 window）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">onst <span class="token function-variable function">getContext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数一劳永逸地与词汇上下文绑定。 即使修改上下文，this也不能被改变：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [1, 2]</span>  <span class="token comment">// Use arrow function with .apply() and .call()</span>  <span class="token function">get</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => [1, 2]</span>  <span class="token function">get</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [1, 2]</span>  <span class="token comment">// Bind</span>  <span class="token function">get</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => [1, 2]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论如何调用箭头函数get，它总是保留词汇上下文numbers。 用其他上下文的隐式调用(通过 get.call([0])或get.apply([0]))或者重新绑定(通过.bind())都不会起作用。</p><p>箭头函数不能用作构造函数。 将它作为构造函数调用(new get())会抛出一个错误：TypeError: get is not a constructor。</p><h3 id="7-2-陷阱-用箭头函数定义方法"><a href="#7-2-陷阱-用箭头函数定义方法" class="headerlink" title="7.2. 陷阱: 用箭头函数定义方法"></a>7.2. 陷阱: 用箭头函数定义方法</h3><p>你可能希望使用箭头函数来声明一个对象上的方法。箭头函数的定义相比于函数表达式短得多：(param) =&gt; {…} instead of function(param) {..}。</p><p>来看看例子，用箭头函数在Period类上定义了format()方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Period</span> <span class="token punctuation">(</span><span class="token parameter">hours<span class="token punctuation">,</span> minutes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hours <span class="token operator">=</span> hours<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>minutes <span class="token operator">=</span> minutes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Period</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hours <span class="token operator">+</span> <span class="token string">' hours and '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minutes <span class="token operator">+</span> <span class="token string">' minutes'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> walkPeriod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Period</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  walkPeriod<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'undefined hours and undefined minutes'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于format是一个箭头函数，并且在全局上下文（最顶层的作用域）中定义，因此 this 指向window对象。</p><p>即使format作为方法在一个对象上被调用如walkPeriod.format()，window仍然是这次调用的上下文。之所以会这样是因为箭头函数有静态的上下文，并不会随着调用方式的改变而改变。</p><p>该方法返回’undefined hours和undefined minutes’，这不是咱们想要的结果。</p><p>函数表达式解决了这个问题，因为常规函数确实能根据实际调用改变它的上下文：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Period</span> <span class="token punctuation">(</span><span class="token parameter">hours<span class="token punctuation">,</span> minutes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hours <span class="token operator">=</span> hours<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>minutes <span class="token operator">=</span> minutes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Period</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">format</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> walkPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hours <span class="token operator">+</span> <span class="token string">' hours and '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minutes <span class="token operator">+</span> <span class="token string">' minutes'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> walkPeriod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Period</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  walkPeriod<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => '2 hours and 30 minutes'</span>walkPeriod<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是一个对象上的方法调用，它的上下文是walkPeriod对象。<span class="token keyword">this</span><span class="token punctuation">.</span>hours等于<span class="token number">2</span>，<span class="token keyword">this</span><span class="token punctuation">.</span>minutes等于<span class="token number">30</span>，所以这个方法返回了正确的结果：<span class="token string">'2 hours and 30 minutes'</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单理解token机制</title>
      <link href="2020/11/17/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3token%E6%9C%BA%E5%88%B6/"/>
      <url>2020/11/17/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3token%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是token"><a href="#什么是token" class="headerlink" title="什么是token"></a>什么是token</h2><p>token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p><p>当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。</p><p>简单token的组成；uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token的前几位以哈希算法压缩成的一定长度的十六进制字符串。为防止token泄露）。</p><h2 id="身份认证概述"><a href="#身份认证概述" class="headerlink" title="身份认证概述"></a>身份认证概述</h2><p>由于HTTP是一种没有状态的协议，它并不知道是谁访问了我们的应用。这里把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下次这个客户端再发送请求时候，还得再验证一下。</p><p>通用的解决方法就是，当用户请求登录的时候，如果没有问题，在服务端生成一条记录，在这个记录里可以说明登录的用户是谁，然后把这条记录的id发送给客户端，客户端收到以后把这个id存储在cookie里，下次该用户再次向服务端发送请求的时候，可以带上这个cookie，这样服务端会验证一下cookie里的信息，看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。</p><p>以上所描述的过程就是利用session，那个id值就是sessionid。我们需要在服务端存储为用户生成的session，这些session会存储在内存，磁盘，或者数据库。</p><h2 id="基于token机制的身份认证"><a href="#基于token机制的身份认证" class="headerlink" title="基于token机制的身份认证"></a>基于token机制的身份认证</h2><p>使用token机制的身份验证方法，在服务器端不需要存储用户的登录记录。大概的流程：</p><p>客户端使用用户名和密码请求登录。服务端收到请求，验证用户名和密码。验证成功后，服务端会生成一个token，然后把这个token发送给客户端。客户端收到token后把它存储起来，可以放在cookie或者Local Storage（本地存储）里。客户端每次向服务端发送请求的时候都需要带上服务端发给的token。服务端收到请求，然后去验证客户端请求里面带着token，如果验证成功，就向客户端返回请求的数据。</p><p>利用token机制进行登录认证，可以有以下方式：</p><p><strong>a.用设备mac地址作为token</strong></p><p>客户端：客户端在登录时获取设备的mac地址，将其作为参数传递到服务端</p><p>服务端：服务端接收到该参数后，便用一个变量来接收，同时将其作为token保存在数据库，并将该token设置到session中。客户端每次请求的时候都要统一拦截，将客户端传递的token和服务器端session中的token进行对比，相同则登录成功，不同则拒绝。</p><p>此方式客户端和服务端统一了唯一的标识，并且保证每一个设备拥有唯一的标识。缺点是服务器端需要保存mac地址；优点是客户端无需重新登录，只要登录一次以后一直可以使用，对于超时的问题由服务端进行处理。</p><p> <strong>b.用sessionid作为token</strong></p><p>客户端：客户端携带用户名和密码登录</p><p>服务端：接收到用户名和密码后进行校验，正确就将本地获取的sessionid作为token返回给客户端，客户端以后只需带上请求的数据即可。</p><p>此方式的优点是方便，不用存储数据，缺点就是当session过期时，客户端必须重新登录才能请求数据。</p><p>当然，对于一些保密性较高的应用，可以采取两种方式结合的方式，将设备mac地址与用户名密码同时作为token进行认证。</p><h2 id="APP利用token机制进行身份认证"><a href="#APP利用token机制进行身份认证" class="headerlink" title="APP利用token机制进行身份认证"></a>APP利用token机制进行身份认证</h2><p>用户在登录APP时，APP端会发送加密的用户名和密码到服务器，服务器验证用户名和密码，如果验证成功，就会生成相应位数的字符产作为token存储到服务器中，并且将该token返回给APP端。</p><p>以后APP再次请求时，凡是需要验证的地方都要带上该token，然后服务器端验证token，成功返回所需要的结果，失败返回错误信息，让用户重新登录。其中，服务器上会给token设置一个有效期，每次APP请求的时候都验证token和有效期。</p><h2 id="token的存储"><a href="#token的存储" class="headerlink" title="token的存储"></a>token的存储</h2><p>token可以存到数据库中，但是有可能查询token的时间会过长导致token丢失（其实token丢失了再重新认证一个就好，但是别丢太频繁，别让用户没事儿就去认证）。</p><p>为了避免查询时间过长，可以将token放到内存中。这样查询速度绝对就不是问题了，也不用太担心占据内存，就算token是一个32位的字符串，应用的用户量在百万级或者千万级，也是占不了多少内存的。</p><h2 id="token的加密"><a href="#token的加密" class="headerlink" title="token的加密"></a>token的加密</h2><p>token是很容易泄露的，如果不进行加密处理，很容易被恶意拷贝并用来登录。加密的方式一般有：</p><p>在存储的时候把token进行对称加密存储，用到的时候再解密。文章最开始提到的签名sign：将请求URL、时间戳、token三者合并，通过算法进行加密处理。</p><p>最好是两种方式结合使用。</p><p>还有一点，在网络层面上token使用明文传输的话是非常危险的，所以一定要使用HTTPS协议。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十个实用的ES6方法</title>
      <link href="2020/11/16/%E5%8D%81%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84ES6%E6%96%B9%E6%B3%95/"/>
      <url>2020/11/16/%E5%8D%81%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84ES6%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符串反转"><a href="#1-字符串反转" class="headerlink" title="1.字符串反转"></a>1.字符串反转</h2><p>在此示例中，我们使用展开运算符，Array的reverse方法和 String 的join方法来反转给定的字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token parameter">string</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>string<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">'Medium'</span><span class="token punctuation">)</span> <span class="token comment">// "muideM"</span><span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token string">'Better Programming'</span><span class="token punctuation">)</span> <span class="token comment">// "gnimmargorP retteB"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-计算指定数字的阶乘"><a href="#2-计算指定数字的阶乘" class="headerlink" title="2.计算指定数字的阶乘"></a>2.计算指定数字的阶乘</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">factorialOfNumber</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span>   number <span class="token operator">&lt;</span> <span class="token number">0</span>    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'请输入正整数'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">:</span> number <span class="token operator">&lt;=</span> <span class="token number">1</span>      <span class="token operator">?</span> <span class="token number">1</span>      <span class="token operator">:</span> number <span class="token operator">*</span> <span class="token function">factorialOfNumber</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">factorialOfNumber</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 24</span><span class="token function">factorialOfNumber</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment">// 40320</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-将数字转换为数字数组"><a href="#3-将数字转换为数字数组" class="headerlink" title="3.将数字转换为数字数组"></a>3.将数字转换为数字数组</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">converToArray</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>number<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token function">parseInt</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">converToArray</span><span class="token punctuation">(</span><span class="token number">5678</span><span class="token punctuation">)</span> <span class="token comment">// [5, 6, 7, 8]</span><span class="token function">converToArray</span><span class="token punctuation">(</span><span class="token number">12345678</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-检查数字是否为2的幂"><a href="#4-检查数字是否为2的幂" class="headerlink" title="4.检查数字是否为2的幂"></a>4.检查数字是否为2的幂</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">isNumberPowerOfTwo</span> <span class="token operator">=</span> <span class="token parameter">number</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span>number <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>number <span class="token operator">&amp;</span> <span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token comment">// 事例</span><span class="token function">isNumberPowerOfTwo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">isNumberPowerOfTwo</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-从对象创建键-值对数组"><a href="#5-从对象创建键-值对数组" class="headerlink" title="5.从对象创建键-值对数组"></a>5.从对象创建键-值对数组</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">keyValuePairsToArray</span> <span class="token operator">=</span> <span class="token parameter">object</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span>el<span class="token punctuation">,</span> object<span class="token punctuation">[</span>el<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">keyValuePairsToArray</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Better<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> Programming<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// [['Better', 4], ['Programming', 2]]</span><span class="token function">keyValuePairsToArray</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// [['x', 1], ['y', 2], ['z', 3]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-返回数字数组中的最大值"><a href="#6-返回数字数组中的最大值" class="headerlink" title="6.返回数字数组中的最大值"></a>6.返回数字数组中的最大值</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">maxElementsFromArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> number <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> y <span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">maxElementsFromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [5]</span><span class="token function">maxElementsFromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [10, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-检查数组中的所有元素是否相等"><a href="#7-检查数组中的所有元素是否相等" class="headerlink" title="7. 检查数组中的所有元素是否相等"></a>7. 检查数组中的所有元素是否相等</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">elementsAreEqual</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=></span> array<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> el <span class="token operator">===</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">elementsAreEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span class="token function">elementsAreEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-返回数的平均值"><a href="#8-返回数的平均值" class="headerlink" title="8. 返回数的平均值"></a>8. 返回数的平均值</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">averageOfTwoNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token operator">=></span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token comment">// 事例</span><span class="token function">averageOfTwoNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 7</span><span class="token function">averageOfTwoNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 7.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-返回两个或多个数字的和"><a href="#9-返回两个或多个数字的和" class="headerlink" title="9.返回两个或多个数字的和"></a>9.返回两个或多个数字的和</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">sumOfNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">sumOfNumbers</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 45</span><span class="token function">sumOfNumbers</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-返回数字数组的幂集"><a href="#10-返回数字数组的幂集" class="headerlink" title="10.返回数字数组的幂集"></a>10.返回数字数组的幂集</h2><p>所谓幂集（Power Set）， 就是原集合中所有的子集（包括全集和空集）构成的集族。可数集是最小的无限集； 它的幂集和实数集一一对应（也称同势），是不可数集。 不是所有不可数集都和实数集等势，集合的势可以无限的大。如实数集的幂集也是不可数集，但它的势比实数集大。 设X是一个有限集，|X| = k，则X的幂集的势为2的k次方。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">powersetOfArray</span> <span class="token operator">=</span> <span class="token parameter">array</span> <span class="token operator">=></span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span>currentValue<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 事例</span><span class="token function">powersetOfArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[], [4], [2], [2, 4]]</span><span class="token function">powersetOfArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// [[], [1], [2], [2,1], [3], [3,1], [3,2], [3,2,1]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法</title>
      <link href="2020/11/11/Markdown-%E8%AF%AD%E6%B3%95/"/>
      <url>2020/11/11/Markdown-%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、学习了markdown语法"><a href="#一、学习了markdown语法" class="headerlink" title="一、学习了markdown语法"></a>一、学习了markdown语法</h2><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"># 你好## 你好### 你好#### 你好##### 你好###### 你好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-段落"><a href="#2-段落" class="headerlink" title="2.段落"></a>2.段落</h3><ul><li>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</li><li>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</li></ul><h3 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">   <span class="token operator">*</span>斜体<span class="token operator">*</span>   _斜体_  <span class="token operator">**</span>粗体<span class="token operator">**</span>  __粗体__<span class="token operator">**</span><span class="token operator">*</span>粗斜体<span class="token operator">**</span><span class="token operator">*</span>___粗斜体___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h3><p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">   <span class="token operator">**</span><span class="token operator">*</span>  <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>  <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>  <span class="token operator">-</span> <span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5.删除线"></a>5.删除线</h3><p><code>~~BAIDU.COM~~</code></p><h3 id="6-下划线"><a href="#6-下划线" class="headerlink" title="6.下划线"></a>6.下划线</h3><p>下划线可以通过 HTML 的<code>&lt;u&gt;</code> 标签来实现</p><h3 id="7-脚注"><a href="#7-脚注" class="headerlink" title="7.脚注"></a>7.脚注</h3><p>脚注是对文本的补充说明。<br>    Markdown 脚注的格式如下:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">^</span>要注明的文本<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-markdown-list-列表"><a href="#8-markdown-list-列表" class="headerlink" title="8.markdown list(列表)"></a>8.markdown list(列表)</h3><p>Markdown 支持有序列表和无序列表。</p><ol><li>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">*</span> 第一项<span class="token operator">*</span> 第二项<span class="token operator">*</span> 第三项<span class="token operator">+</span> 第一项<span class="token operator">+</span> 第二项<span class="token operator">+</span> 第三项<span class="token operator">-</span> 第一项<span class="token operator">-</span> 第二项<span class="token operator">-</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>有序列表使用数字并加上 . 号来表示</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 第一项<span class="token number">2.</span> 第二项<span class="token number">3.</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>列表嵌套只需在子列表中的选项添加四个空格即可</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> 第一项：    <span class="token operator">-</span> 第一项嵌套的第一个元素    <span class="token operator">-</span> 第一项嵌套的第二个元素<span class="token number">2.</span> 第二项：    <span class="token operator">-</span> 第二项嵌套的第一个元素    <span class="token operator">-</span> 第二项嵌套的第一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-Markdown-区块"><a href="#9-Markdown-区块" class="headerlink" title="9.Markdown 区块"></a>9.Markdown 区块</h3><ol><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个 空格符号</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">></span> 区块引用<span class="token operator">></span> mackdown教程<span class="token operator">></span> 学的不仅是技术更是梦想 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推退</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">></span> 最外层<span class="token operator">></span> <span class="token operator">></span> 第一层嵌套<span class="token operator">></span> <span class="token operator">></span> <span class="token operator">></span> 第二层嵌套 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>区块中使用列表</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">></span> 区块中使用列表<span class="token operator">></span> <span class="token number">1.</span> 第一项<span class="token operator">></span> <span class="token number">2.</span> 第二项<span class="token operator">></span> <span class="token operator">+</span> 第一项<span class="token operator">></span> <span class="token operator">+</span> 第二项<span class="token operator">></span> <span class="token operator">+</span> 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">*</span> 第一项    <span class="token operator">></span> mackdown教程    <span class="token operator">></span> 学的不仅是技术更是梦想<span class="token operator">*</span> 第二项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-Markdown-代码"><a href="#10-Markdown-代码" class="headerlink" title="10.Markdown 代码"></a>10.Markdown 代码</h3><ol><li>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`）</li></ol><p><code>printf()</code> 函数</p><ol start="2"><li>代码区块使用 4 个空格或者一个制表符（Tab 键），你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11-Markdown-链接"><a href="#11-Markdown-链接" class="headerlink" title="11.Markdown 链接"></a>11.Markdown 链接</h3><ol><li><p>链接使用方法如下：  </p><pre><code> `[链接名称](链接地址)`  或者 &lt;链接地址&gt;</code></pre></li><li><p>高级链接  </p><pre><code> 链接也可以用变量来代替，文档末尾附带变量地址： 这个链接用 1 作为网址变量`[Google][1]` 这个链接用 `runoob` 作为网址变量`[Runoob][runoob]` 然后在文档的结尾为变量赋值（网址） `[1]: http://www.google.com/` `[runoob]: http://www.runoob.com/`</code></pre></li></ol><h3 id="12-Markdown-图片"><a href="#12-Markdown-图片" class="headerlink" title="12.Markdown 图片"></a>12.Markdown 图片</h3><ol><li>Markdown 图片语法格式如下：  </li></ol><p><code>![alt 属性文本](图片地址)</code><br><code>![alt 属性文本](图片地址 &quot;可选标题&quot;)</code><br>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><p>2.当然，你也可以像网址那样对图片网址使用变量:</p><p>这个链接用 <code>1</code> 作为网址变量 <code>[RUNOOB][1]</code>.<br>然后在文档的结尾位变量赋值（网址）<br><code>[1]: http://static.runoob.com/images/runoob-logo.png</code></p><h3 id="13-Markdown-表格"><a href="#13-Markdown-表格" class="headerlink" title="13.Markdown 表格"></a>13.Markdown 表格</h3><ol><li>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">|</span>  表头   <span class="token operator">|</span> 表头  <span class="token operator">|</span><span class="token operator">|</span>  <span class="token operator">--</span><span class="token operator">--</span>  <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span>  <span class="token operator">|</span><span class="token operator">|</span> 单元格  <span class="token operator">|</span> 单元格 <span class="token operator">|</span><span class="token operator">|</span> 单元格  <span class="token operator">|</span> 单元格 <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对齐方式，我们可以设置表格的对齐方式：</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">-</span><span class="token operator">:</span> 设置内容和标题栏居右对齐。<span class="token operator">:</span><span class="token operator">-</span> 设置内容和标题栏居左对齐。<span class="token operator">:</span><span class="token operator">-</span><span class="token operator">:</span> 设置内容和标题栏居中对齐。<span class="token operator">|</span> 左对齐 <span class="token operator">|</span> 右对齐 <span class="token operator">|</span> 居中对齐 <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">:</span> <span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">:</span> <span class="token operator">|</span><span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span><span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span> 单元格 <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-Markdown-高级技巧"><a href="#14-Markdown-高级技巧" class="headerlink" title="14.Markdown 高级技巧"></a>14.Markdown 高级技巧</h3><ol><li><p>支持的 HTML 元素<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>目前支持的 HTML 元素有：<code>&lt;kdb&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：<br>使用` <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></li><li><p>转义<br>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js">    <span class="token operator">**</span>文本加粗<span class="token operator">**</span>\<span class="token operator">*</span>\<span class="token operator">*</span> 正常显示星号 \<span class="token operator">*</span>\<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</li></ol><pre class="line-numbers language-none"><code class="language-none">\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 轻量标记语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning TypeScript</title>
      <link href="2020/11/11/Learning-TypeScript/"/>
      <url>2020/11/11/Learning-TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="一、变量类型"><a href="#一、变量类型" class="headerlink" title="一、变量类型"></a>一、变量类型</h2><h3 id="1-number-类型"><a href="#1-number-类型" class="headerlink" title="1.number 类型"></a>1.number 类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let num1 : number &#x3D; 20;let num2 : number &#x3D; 175.5;let a1 : number &#x3D; Infinity; &#x2F;&#x2F;正无穷大let a2 : number &#x3D; -Infinity; &#x2F;&#x2F;负无穷小let a3 : number &#x3D; NaN;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：Infinity, -Infinity, NaN 也属于Number类型</p></blockquote><h3 id="2-undefined-类型"><a href="#2-undefined-类型" class="headerlink" title="2.undefined 类型"></a>2.undefined 类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let un : undefined &#x3D; undefined;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 typescript中，已声明未初始化的值要直接访问的话，类型需要定义为undefined</p><blockquote><p>注意：undefined 类型的数据只能被赋值为 undefined</p></blockquote><h3 id="3-null-类型"><a href="#3-null-类型" class="headerlink" title="3.null 类型"></a>3.null 类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let nu : null &#x3D; null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：null 类型只能被被赋值为null</p></blockquote><p>null是一个空指针对象，undefined是未初始化的变量，所以，可以把undefined看成一个空变量，把unll看成一个空对象。</p><blockquote><p>特别注意： 默认情况下，undefined 和 null 类型，是所有其它类型的子类型，也可以说成，它俩可以给所有其他类型赋值。</p></blockquote><h3 id="4-string-类型"><a href="#4-string-类型" class="headerlink" title="4.string 类型"></a>4.string 类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;值类型let str : string &#x3D; &#39;你好！&#39;&#x2F;&#x2F;引用类型let str1 : String &#x3D; new String(&#39;你好！&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-boolean-类型"><a href="#5-boolean-类型" class="headerlink" title="5. boolean 类型"></a>5. boolean 类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let boo : boolean &#x3D; true;let boo1 : boolean &#x3D; false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-symbol-类型"><a href="#6-symbol-类型" class="headerlink" title="6.symbol 类型"></a>6.symbol 类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let sy : symbol &#x3D; Symbol(&#39;bar&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意： symbol类型的值是通过Symbol构造函数创建的。</p></blockquote><h3 id="7-数组类型"><a href="#7-数组类型" class="headerlink" title="7. 数组类型"></a>7. 数组类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;字面量let arr1 : number[] &#x3D; [1, 2] &#x2F;&#x2F;泛型----&gt;相当于数组中每个元素的类型let arr2 : Array&lt;string&gt; &#x3D; [&#39;a&#39;, &#39;s&#39;] &#x2F;&#x2F;构造函数let arr3 : string[] &#x3D; new Array(&#39;a&#39;, &#39;s&#39;) &#x2F;&#x2F;联合类型--&gt;这里的联合类型的意思是，数组中元素的类型可以是number 或 string，两种都有也可以let arr4 : Array&lt;number | string&gt; &#x3D; [2, &#39;a&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-元组类型（tuple）"><a href="#8-元组类型（tuple）" class="headerlink" title="8.元组类型（tuple）"></a>8.元组类型（tuple）</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let tup : [string,number] &#x3D; [&#39;asdasd&#39;, 43233];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：元组和数组看起来有点类似，但是，是有区别的,元组的长度是有限的，而且分别为每一个元素定义了类型</p></blockquote><h3 id="9-枚举类型（enum）"><a href="#9-枚举类型（enum）" class="headerlink" title="9. 枚举类型（enum）"></a>9. 枚举类型（enum）</h3><p>enum—&gt;组织收集一组相关变量的方式</p><h4 id="1-数字枚举"><a href="#1-数字枚举" class="headerlink" title="1. 数字枚举"></a>1. 数字枚举</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">enum REN &#123;    &#x2F;&#x2F; nan &#x3D; 1 -----&gt;初始化下标    nan,    nv,    yao&#125;console.log(REN.nan)&#x2F;&#x2F;0console.log(REN.nv)&#x2F;&#x2F;1console.log(REN.yao)&#x2F;&#x2F;2&#x2F;&#x2F;使用数字枚举时，TS 会为枚举成员生成反向映射console.log(REN[2])&#x2F;&#x2F; yao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：数字的枚举—-&gt;下标从0开始,也可以自行设置枚举成员的初始值，它们会依次递增</p></blockquote><h4 id="2-字符串枚举"><a href="#2-字符串枚举" class="headerlink" title="2. 字符串枚举"></a>2. 字符串枚举</h4><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">enum SIJI &#123;    chun &#x3D; &#39;春&#39;,    xia &#x3D; &#39;夏&#39;,    qiu &#x3D; &#39;秋&#39;,    dong &#x3D; &#39;冬&#39;&#125;console.log(SIJI.chun)&#x2F;&#x2F;春console.log(SIJI.xia)&#x2F;&#x2F;夏console.log(SIJI.qiu)&#x2F;&#x2F;秋console.log(SIJI.dong)&#x2F;&#x2F;冬<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：字符串枚举类型允许使用字符串来初始化枚举成员，可以是一个字符串字面量或者另一个字符串的枚举成员</p></blockquote><p>字符串枚举类型不支持成员自增长，每个成员必须初始化，另外字符串枚举不会为成员生成发向映射</p><h3 id="10-void-类型"><a href="#10-void-类型" class="headerlink" title="10. void 类型"></a>10. void 类型</h3><p>void 类型—&gt;表示没有任何返回值，一般用于定义方法时方法没有返回值</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f1() : void &#123;    console.log(&#39;void类型&#39;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这里你也可以指定返回值类型为 undefined。因为 JS 中，如果函数没有返回值，则会默认返回 undefind。不过，使用 void 类型可以使表意更清晰。</p></blockquote><h3 id="11-any-类型"><a href="#11-any-类型" class="headerlink" title="11. any 类型"></a>11. any 类型</h3><blockquote><p>注意： 其他类型都是any类型的子类型 ，any类型的值可以被赋值为任何类型的值</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let an : any &#x3D; &#39;any 类型&#39;;console.log(an)&#x2F;&#x2F;any 类型an &#x3D; 25;console.log(an)&#x2F;&#x2F;25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：对于any 需要注意两点</p></blockquote><p>如果在声明变量时，没有声明其类型，也没有初始化，（因为类型推断会自动判断类型），那么它就会被判断为any类型</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let an1;an1 &#x3D; &#39;没有声明其类型，也没有初始化&#39;;console.log(an1)&#x2F;&#x2F;没有声明其类型，也没有初始化an1 &#x3D; 25console.log(an1)&#x2F;&#x2F;25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在any类型变量上可以访问任何属性，即使它不存在</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let something: any &#x3D; 42something.mayExist()    &#x2F;&#x2F; 没问题，因为其可能在运行时存在something.toFixed() &#x2F;&#x2F; 没问题，虽然确实存在，但是编译器并不会去检查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-never-类型"><a href="#12-never-类型" class="headerlink" title="12. never 类型"></a>12. never 类型</h3><blockquote><p>注意：never 表示永远不会存在的值的类型， never 是任何类型的子类型，但是 没有任何类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。</p></blockquote><p>never 类型常用于两种情况</p><p>用于描述从不会有返回值的函数—&gt;返回never的函数必须存在无法达到的终点</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f5() : never &#123;    while (true) &#123;         &#x2F;&#x2F; do something     &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于描述总抛出错误的函数</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f2(msg : string) : never &#123;    throw new Error(msg)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="13-日期类型"><a href="#13-日期类型" class="headerlink" title="13. 日期类型"></a>13. 日期类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let da : Date &#x3D; new Date()console.log(da)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14-正则表达式类型"><a href="#14-正则表达式类型" class="headerlink" title="14. 正则表达式类型"></a>14. 正则表达式类型</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;构造函数声明法let reg1 : RegExp &#x3D; new RegExp(&#39;ljy&#39;,&#39;gi&#39;)console.log(reg1)&#x2F;&#x2F;字面量的声明法let reg2 : RegExp &#x3D; &#x2F;ljy&#x2F;giconsole.log(reg2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="1-函数定义"><a href="#1-函数定义" class="headerlink" title="1. 函数定义"></a>1. 函数定义</h3><p>定义函数有函数声明和函数表达式两种形式。定义函数的参数和返回值可以指定其类型；当调用函数时，传入参数类型必须与定义函数参数类型保持一致。</p><ul><li>函数声明定义</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;            参数类型    返回值类型function f(age:number) : string &#123;    return &#96;找到了$&#123;age&#125;的小哥哥&#96;;&#125;let age : number &#x3D; 22;let res : string &#x3D; f(age);console.log(res)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数表达式定义</li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let f1 &#x3D; (age:number) : string &#x3D;&gt; &#123;    return &#96;找到了$&#123;age&#125;的小哥哥&#96;;&#125;let age1 :number &#x3D; 21;let res1 : string &#x3D; f1(age1);console.log(res1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：表达式定义完以后，必须调用函数</p></blockquote><p>函数表达式还有一种写法： 函数表达式：指定变量fn的类型</p><blockquote><p>注意不要混淆了 TypeScript 中的 =&gt; 和 ES6 中的 =&gt;,</p></blockquote><p><strong>在 TypeScript 的类型定义中，=&gt; 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F; let fn: (x: Type, y: Type) &#x3D;&gt; Type &#x3D; (x, y) &#x3D;&gt; &#123;&#125; &#x2F;&#x2F;例子var run3: (x: number, y: number) &#x3D;&gt; string &#x3D; function(x: number, y: number): string&#123;    return &#39;run3&#39;;&#125;console.log(run3(1, 2))  &#x2F;&#x2F;当给变量run3指定类型的时候，应该是函数的参数和返回值的约束类型。如果用后面学到的ts类型推论，可以简写为： var run4: (x: number, y: number) &#x3D;&gt; string &#x3D; function(x, y)&#123; &#x2F;&#x2F; 类型推论可以确定函数的参数和返回值类型，也就可以省略类型指定    return &#39;run4&#39;;&#125;console.log(run4(1, 2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数没有返回值可以使用void类型值定返回值"><a href="#2-函数没有返回值可以使用void类型值定返回值" class="headerlink" title="2. 函数没有返回值可以使用void类型值定返回值"></a>2. 函数没有返回值可以使用void类型值定返回值</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function  f3() : void &#123;    console.log(&#39;没有返回值&#39;)&#125;f3()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-可选参数的函数"><a href="#3-可选参数的函数" class="headerlink" title="3. 可选参数的函数"></a>3. 可选参数的函数</h3><blockquote><p>注意：可选参数一定要放在参数的最后面</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f4(age:number, cm?:number) : string &#123;    &#x2F;&#x2F;cm为可选参数，可传可不传    if (cm) &#123;        return &#96;可选参数------身高为$&#123;cm&#125;厘米&#96;;    &#125; else &#123;        return &#96;可选参数-----年龄$&#123;age&#125;岁&#96;    &#125;&#125;console.log(f4(12))console.log(f4(24, 175))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-有默认值参数的函数"><a href="#4-有默认值参数的函数" class="headerlink" title="4. 有默认值参数的函数"></a>4. 有默认值参数的函数</h3><blockquote><p>注意：ts会将添加了默认值的参数识别为可选参数，有默认值的参数的位置不受【可选参数必须放在后面】的限制</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f5(age:number, cm:number &#x3D; 188) : string &#123;    return &#96;默认参数----年龄为$&#123;age&#125;岁---身高为$&#123;cm&#125;cm&#96;&#125;console.log(f5(25))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-剩余参数的函数"><a href="#5-剩余参数的函数" class="headerlink" title="5. 剩余参数的函数"></a>5. 剩余参数的函数</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;当有很多参数的时候，或者参数个数不确定，可以用三点运算符function f6(...rest:number[]) : number[] &#123;    return [...rest];&#125;console.log(f6(1,2,3,4,5,6,7,8,9)) function f7(a:number, b:number, ...rest:number[]) : number[] &#123;    return [a, b, ...rest]&#125; console.log(f7(100,200,1,2,3,4,5,6))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-接口中的函数"><a href="#6-接口中的函数" class="headerlink" title="6. 接口中的函数"></a>6. 接口中的函数</h3><p>第一种写法</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface int1 &#123;    say (age:number) : void  &#x2F;&#x2F;抽象方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种写法</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface int2 &#123;    say : (age:number) &#x3D;&gt; void  &#x2F;&#x2F;抽象方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-函数的重载"><a href="#7-函数的重载" class="headerlink" title="7.函数的重载"></a>7.函数的重载</h3><p>注意：</p><ul><li><p>先声明所有方法重载的定义，不包含方法的实现</p></li><li><p>再声明一个参数为any类型的重载方法</p></li><li><p>实现any类型的方法并通过参数类型（和返回类型）不同来实现重载</p></li><li><p>typescript中的重载：通过为同一个函数提供多个函数类型定义来实现多种功能的目的</p></li><li><p>TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f1(x: number, y: number): number;function f1(x: string, y: string): string;&#x2F;&#x2F; 上面定义函数的格式，下面定义函数的具体实现function f1(x: any, y: any): any &#123;    return x + y;&#125;f1(1, 2);f1(&#39;a&#39;, &#39;b&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、-类"><a href="#三、-类" class="headerlink" title="三、 类"></a>三、 类</h2><h3 id="1-访问修饰符"><a href="#1-访问修饰符" class="headerlink" title="1. 访问修饰符"></a>1. 访问修饰符</h3><blockquote><p>public：公共修饰符</p></blockquote><p>注意：<br><strong>表示属性或方法都是公有的，在类的内部，子类的内部，类的实例都能被访问,默认情况下，为public</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class People &#123;    public name : string     constructor (name:string) &#123; &#x2F;&#x2F;构造函数必须写        this.name &#x3D; name    &#125;    public say () :void &#123;        console.log(&#39;你好&#39;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>private 私有修饰符</p></blockquote><p>注意：<br><strong>表示在当前类中可以访问，子类，外部类不可以访问</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class People &#123;    private name : string     constructor (name:string) &#123; &#x2F;&#x2F;构造函数必须写        this.name &#x3D; name    &#125;    private say () :void &#123;        console.log(&#39;你好&#39;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>protected 保护类型</p></blockquote><p>注意：<br><strong>表示在当前类中和子类中可以访问，外部类不可以访问</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class People &#123;    protected name : string     constructor (name:string) &#123; &#x2F;&#x2F;构造函数必须写        this.name &#x3D; name    &#125;    protected say () :void &#123;        console.log(&#39;你好&#39;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br><strong>TypeScript 只做编译时检查，当你试图在类外部访问被 private 或者 protected 修饰的属性或方法时，TS 会报错，但是它并不能阻止你访问这些属性或方法。</strong></p><blockquote><p>readonly 只读修饰符</p></blockquote><p>注意：<br><strong>表示某个属性是只读的，不能被修改</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class People &#123;    readonly name : string     constructor (name:string) &#123; &#x2F;&#x2F;构造函数必须写        this.name &#x3D; name    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-声明类"><a href="#2-声明类" class="headerlink" title="2. 声明类"></a>2. 声明类</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class People &#123;    name : string &#x2F;&#x2F;默认为public    age : number    constructor (name:string, age:number) &#123; &#x2F;&#x2F;构造函数必须写        this.name &#x3D; name        this.age &#x3D; age    &#125;    say () :void &#123;        console.log(&#39;你好&#39;)    &#125;&#125;const HH : People &#x3D; new People(&#39;含含&#39;, 21)console.log(HH.name)console.log(HH.age)HH.say()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-类的继承"><a href="#3-类的继承" class="headerlink" title="3. 类的继承"></a>3. 类的继承</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Student extends People &#123;     cm : number    constructor (name:string, age:number, cm:number) &#123;        super(name, age) &#x2F;&#x2F;super 继承父类的构造函数，并向构造函数传参，super必须写在第一行        this.cm &#x3D; cm    &#125;    work () : void &#123;        console.log(&#39;学习&#39;)    &#125;&#125;const  stu1 : Student &#x3D; new Student(&#39;liu&#39;, 22, 175)console.log(stu1.name)console.log(stu1.age)console.log(stu1.cm)stu1.say()stu1.work()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-静态属性和静态方法"><a href="#4-静态属性和静态方法" class="headerlink" title="4. 静态属性和静态方法"></a>4. 静态属性和静态方法</h3><p>注意：</p><ul><li><p>静态方法和静态属性必须使用类名调用</p></li><li><p>静态属性和静态方法在实例化之前就已经存在</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class People &#123;    static name1 : string &#x3D; &#39;静态属性&#39;;    static say () :void &#123;        console.log(&#39;静态方法&#39;)    &#125;&#125;console.log(People.name1)People.say()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<br><strong>静态方法调用不了实例化方法和实例化属性，因为静态域加载是在解析阶段，而实例化是在初始化阶段，（java原理），所以静态方法里面不能调用本类的方法和属性，可以调用静态属性和静态方法</strong></p><h3 id="5-多态"><a href="#5-多态" class="headerlink" title="5. 多态"></a>5. 多态</h3><ul><li><p>多态—-&gt;重写方法</p></li><li><p>父类定义一个方法不去实现，让继承它的子类去实现，每个子类的该方法有不同的表现</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Animal &#123;    name : string    constructor (name:string) &#123;        this.name &#x3D; name    &#125;    eat () : void &#123;        &#x2F;&#x2F;让它的子类去实现不同的eat方法    &#125;&#125;class Laohu extends Animal &#123;    constructor (name:string) &#123;        super(name)    &#125;    eat () : void &#123;        console.log(&#96;$&#123;this.name&#125;吃肉！&#96;)    &#125;&#125;class Laoshu extends Animal &#123;    constructor (name:string) &#123;        super(name)    &#125;    eat () : void &#123;        console.log(&#96;$&#123;this.name&#125;吃粮食！&#96;)    &#125;&#125;const laohu : Laohu &#x3D; new Laohu(&#39;老虎&#39;)laohu.eat()const  laoshu : Laoshu &#x3D; new Laoshu(&#39;老鼠&#39;)laoshu.eat()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-类和接口"><a href="#6-类和接口" class="headerlink" title="6. 类和接口"></a>6. 类和接口</h3><p>注意：</p><ul><li><p>类可以实现（implement）接口。通过接口，你可以强制地指明类遵守某个契约。你可以在接口中声明一个方法，然后要求类去具体实现它。</p></li><li><p>接口不可以被实例化，实现接口必须重写接口中的抽象方法</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Play &#123;    plays (difang:string) : void;&#125;class Playy implements Play &#123;    plays(difang: string): void &#123;        console.log(&#96;我们要去$&#123;difang&#125;玩！！！&#96;)    &#125;&#125;const pl : Playy &#x3D; new Playy();pl.plays(&#39;北京&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：类和接口的区别</p></blockquote><ul><li><p>类可以实现（implement）多个接口，但只能扩展（extends）自一个抽象类。</p></li><li><p>抽象类中可以包含具体实现，接口不能。</p></li><li><p>抽象类在运行时是可见的，可以通过 instanceof判断。接口则只在编译时起作用。</p></li><li><p>接口只能描述类的公共（public）部分，不会检查私有成员，而抽象类没有这样的限制。</p></li></ul><h3 id="7-抽象类和抽象方法"><a href="#7-抽象类和抽象方法" class="headerlink" title="7. 抽象类和抽象方法"></a>7. 抽象类和抽象方法</h3><p><strong>注意：</strong></p><ul><li><p>用abstract关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类(抽象类的子类)中实现</p></li><li><p>抽象类：它是提供其他类继承的基类，不能直接被实例化，子类继承可以被实例化</p></li><li><p>abstract修饰的方法(抽象方法)只能放在抽象类里面</p></li><li><p>抽象类和抽象方法用来定义标准(比如定义标准为：抽象类Animal有抽象方法eat，要求它的子类必须包含eat方法)</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">abstract class People &#123;    name : string    constructor (name:string) &#123;        this.name &#x3D; name    &#125;    abstract eat (food:string) :void;&#x2F;&#x2F;抽象方法不包括具体实现，并且必须再派生类中实现&#125;class Stud1 extends People &#123;    &#x2F;&#x2F;抽象类的子类必须实现抽象类中的抽象方法    constructor (name:string) &#123;        super(name)    &#125;    eat(food: string): void &#123;        console.log(&#96;我爱吃$&#123;food&#125;&#96;)    &#125;&#125;const stu11 : Stud1 &#x3D; new Stud1(&#39;liu&#39;)stu11.eat(&#39;面条&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、接口"><a href="#四、接口" class="headerlink" title="四、接口"></a>四、接口</h3><p>注意：</p><ul><li><p><strong>接口定义</strong>：接口是对传入参数进行约束；或者对类里面的属性和方法进行声明和约束，实现这个接口的类必须实现该接口里面属性和方法；typescript中的接口用interface关键字定义。</p></li><li><p><strong>接口作用</strong>：接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供某些方法，提供这些方法的类就可以满足实际需要。typescrip中的接口类似于java，同时还增加了更灵活的接口类型，包括属性、函数、可索引和类等。</p></li></ul><h3 id="1-属性接口"><a href="#1-属性接口" class="headerlink" title="1. 属性接口"></a>1. 属性接口</h3><p>对传入对象的约束，也就是json数据</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Sx &#123;    name : string    age : number&#125; function f8(peop:Sx) &#123;    &#x2F;&#x2F;name age 必须传递    console.log(peop)&#125; const obj &#x3D; &#123;    name : &#39;liu&#39;,    age : 25&#125;f8(obj)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数类型的接口"><a href="#2-函数类型的接口" class="headerlink" title="2. 函数类型的接口"></a>2. 函数类型的接口</h3><p>对方法传入的参数和返回值进行约束</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Sta &#123;    (difang : string, todo : string) : string&#125; let play : Sta &#x3D; (difang:string, todo:string) : string &#x3D;&gt; &#123;    return &#96;我们去$&#123;difang&#125;吃$&#123;todo&#125;&#96;&#125; console.log(play(&#39;灞桥&#39;, &#39;吃烧烤&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-可索引的接口"><a href="#3-可索引的接口" class="headerlink" title="3. 可索引的接口"></a>3. 可索引的接口</h3><blockquote><p>对索引和传入的参数的约束</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;对数组的约束interface UserArr &#123;    &#x2F;&#x2F;索引为number，参数为string    [index : number] : string&#125; const arr : UserArr &#x3D; [&#39;a&#39;, &#39;b&#39;]console.log(arr) &#x2F;&#x2F;对 对象的约束interface UserObj &#123;    [index : number] : number&#125; const obj1 : UserObj &#x3D; &#123; 2:1, 3:4 &#125;console.dir(obj1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-类-类型接口"><a href="#4-类-类型接口" class="headerlink" title="4. 类 类型接口"></a>4. 类 类型接口</h3><blockquote><p>对类的约束</p></blockquote><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Anmal &#123;    &#x2F;&#x2F;对类里面的属性和方法进行约束    name : string    eat (food:string) : void&#125;&#x2F;&#x2F;类实现接口要用implements , 子类必须实现接口里面声明的属性和方法class Laoshu implements Anmal&#123;    name : string    constructor (name : string) &#123;        this.name &#x3D; name    &#125;    eat(food:string):void &#123;        console.log(&#96;$&#123;this.name&#125;吃$&#123;food&#125;&#96;)    &#125;&#125;const lao : Laoshu &#x3D; new Laoshu(&#39;老鼠&#39;)lao.eat(&#39;粮食&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-接口继承"><a href="#5-接口继承" class="headerlink" title="5. 接口继承"></a>5. 接口继承</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&#x2F;&#x2F;父类Anmal看上面&#x2F;&#x2F;实现LaoHu的这个接口，必须也要实现LaoHu继承的Anmal接口中的方法interface LaoHu extends Anmal&#123;    say (sa : string) : void&#125;&#x2F;&#x2F;继承并实现接口class XiaoLaoHu implements LaoHu&#123;    name : string    constructor (name : string) &#123;        this.name &#x3D; name    &#125;    eat (food : string) : void &#123;        console.log(&#96;$&#123;this.name&#125;吃$&#123;food&#125;&#96;)    &#125;    say(sa: string): void &#123;        console.log(&#96;$&#123;this.name&#125;说$&#123;sa&#125;&#96;)    &#125;&#125;const xiao : XiaoLaoHu &#x3D; new XiaoLaoHu(&#39;老虎&#39;)xiao.eat(&#39;肉&#39;)xiao.say(&#39;你好&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、泛型"><a href="#五、泛型" class="headerlink" title="五、泛型"></a>五、泛型</h2><p>注意：</p><blockquote><p>很多时候，类型是写死的，不利于复用，泛型可以简单的理解为给类型的这种值设置变量，解决类，接口，方法的复用性，以及对不特定数据类型的支持</p></blockquote><p>语法 : &lt;类型变量名&gt; 一般是单字母大写</p><h3 id="1-泛型函数"><a href="#1-泛型函数" class="headerlink" title="1. 泛型函数"></a>1. 泛型函数</h3><p>函数再调用时，指定泛型T的类型</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f9&lt;T&gt;(value:T) : T &#123;    &#x2F;&#x2F;传入参数类型为T，返回值的类型也为T    console.log(&#96;我传入了$&#123;value&#125;&#96;)    return value&#125;f9&lt;number&gt;(10)function f10 &lt;T&gt; (value:T) : any &#123;    &#x2F;&#x2F;传入参数的类型为T，返回任意类型的值    console.log(&#96;我返回了$&#123;value&#125;&#96;)    return &#96;我返回了$&#123;value&#125;&#96;&#125;console.log(f10&lt;string&gt;(&#39;我是ljy&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="2. 泛型类"></a>2. 泛型类</h3><p>泛型类，使用 &lt; &gt; 跟在类名后面</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">class Ni &lt;T&gt; &#123;    name : T    constructor (name : T) &#123;        this.name &#x3D; name    &#125;    say (value : T) : any &#123;        return &#96;$&#123;this.name&#125;说$&#123;value&#125;&#96;    &#125;&#125;const ni1 &#x3D; new Ni&lt;string&gt;(&#39;ljy&#39;)&#x2F;&#x2F;实例化类，指定类的类型是stringconsole.log(ni1.say(&#39;你好&#39;))const ni2 &#x3D; new Ni&lt;number&gt;(20)&#x2F;&#x2F;实例化类，指定类的类型是numberconsole.log(ni2.say(23))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3. 泛型接口"></a>3. 泛型接口</h3><p>第一种</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface Niniubi &#123;    &lt;T&gt; (value:T) : any&#125; let fff : Niniubi &#x3D; &lt;T&gt;(value : T) : any &#x3D;&gt; &#123;    return &#96;我传入了$&#123;value&#125;&#96;&#125;console.log(fff&lt;number&gt;(25))console.log(fff&lt;string&gt;(&#39;ljy&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface ConfigFnTwo&lt;T&gt;&#123;    (value:T):T;&#125;function setDataTwo&lt;T&gt;(value:T):T&#123;    return value&#125;var setDataTwoFn:ConfigFnTwo&lt;string&gt; &#x3D; setDataTwosetDataTwoFn(&#39;name&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、命名空间"><a href="#六、命名空间" class="headerlink" title="六、命名空间"></a>六、命名空间</h2><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">namespace Shuaige &#123;    export class DeHua &#123;        public name : string &#x3D; &#39;刘德华&#39;        say () &#123;            console.log(&#96;我是$&#123;this.name&#125;&#96;)        &#125;    &#125;&#125;namespace Bajie &#123;    export class DeHua &#123;        public name : string &#x3D; &#39;马德华&#39;        say () &#123;            console.log(&#96;我是$&#123;this.name&#125;&#96;)        &#125;    &#125;&#125;const de : Shuaige.DeHua &#x3D; new Shuaige.DeHua()de.say()const de1 : Bajie.DeHua &#x3D; new Bajie.DeHua()de1.say()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、联合类型"><a href="#七、联合类型" class="headerlink" title="七、联合类型"></a>七、联合类型</h2><ul><li><p>联合类型表示一个值可以是几种类型之一，我们使用（ | ）分隔每个类型</p></li><li><p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型</p></li><li><p>如果一个值是联合类型，我们只能访问此联合类型的所有类型里面共有的成员</p></li></ul><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let ddd : string | numberddd &#x3D; &#39;nihao&#39;console.log(ddd.length)&#x2F;&#x2F;ddd被推断成了 string，访问它的 length 属性不会报错console.log(&#96;联合类型$&#123;ddd&#125;&#96;)ddd &#x3D; 255console.log(&#96;联合类型$&#123;ddd&#125;&#96;)console.log(ddd.length)&#x2F;&#x2F;报错 ddd被推断成了 number，访问它的 length 属性时就报错了&#x2F;&#x2F;ddd &#x3D; false                   err&#x2F;&#x2F;console.log(&#96;联合类型$&#123;ddd&#125;&#96;)  err<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-访问联合类型的属性或方法"><a href="#1-访问联合类型的属性或方法" class="headerlink" title="1. 访问联合类型的属性或方法"></a>1. 访问联合类型的属性或方法</h3><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f11(name : string, age : string | number) &#123;     console.log(age.length)&#x2F;&#x2F;报错 &#125;f11(&#39;ljy&#39;, &#39;21&#39;)报错：Property &#39;length&#39; does not exist on type &#39;string | number&#39;.Property &#39;length&#39; does not exist on type &#39;number&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，length 不是 string 和 number 的共有属性，所以会报错。所以只能访问类型的共有的属性或方法</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f12(name : string, age : string | number) &#123;    console.log(age.toString)&#125;f12(&#39;ljy&#39;, 21)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、类型断言"><a href="#八、类型断言" class="headerlink" title="八、类型断言"></a>八、类型断言</h2><blockquote><p>注意：类型断言（Type Assertion）可以用来手动指定一个值的类型。</p></blockquote><p>语法：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">&lt;类型&gt;值 或值 as 类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类型断言的用法如上，在需要断言的变量前加上 即可</p><p>就刚才上边TypeScript 不确定一个联合类型的变量到底是哪个类型的时候来说</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f13(name : string, age : string | number) &#123;    if (age.length) &#123; &#x2F;&#x2F;报错        console.log(age.length) &#x2F;&#x2F;报错    &#125;  else &#123;        console.log(age.toString)    &#125;&#125;f13(&#39;ljy&#39;, 21)&#x2F;&#x2F;Property &#39;length&#39; does not exist on type &#39;string |number&#39;.Property &#39;length&#39; does not exist on type &#39;number&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可以使用类型断言，将 age 断言成 string</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function f14(name : string, age : string | number) &#123;    if ((&lt;string&gt;age).length) &#123;&#x2F;&#x2F;断言        console.log((&lt;string&gt;age).length)&#x2F;&#x2F;断言    &#125;  else &#123;        console.log(age.toString)    &#125;&#125;f14(&#39;ljy&#39;, 21)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"> function toBoolean(something: string | number): boolean &#123;     return &lt;boolean&gt;something; &#125;Type &#39;string | number&#39; cannot be converted to type &#39;boolean&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="理解TypeScript中的as"><a href="#理解TypeScript中的as" class="headerlink" title="理解TypeScript中的as"></a>理解TypeScript中的as</h3><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const mapDispatch &#x3D; (dispatch: any) &#x3D;&gt; (&#123;  submit: (dispatch as Dispatch).login.submit,&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/11/11/ZBQ9Cq3IuApl27y.png" alt="类型断言" loading="lazy"></p><ul><li><p>as是ts的关键字,只是用来限制child的类型。<br>js没有强类型声明，不需要as。</p></li><li><p>要理解好类型断言，其实就深刻理解一句话：你会比TypeScript更了解某个值的详细信息 。</p></li><li><p>类型断言，断言 断言，顾名思义，我断定怎么怎么样，代入这句话里就是，我断定这个类型是什么。当然这是我们主观上的思维逻辑，程序并不认可，所以我们需要告诉程序：“相信我，我知道自己在干什么” 。</p></li></ul><h3 id="any-任意值"><a href="#any-任意值" class="headerlink" title="any 任意值"></a>any 任意值</h3><blockquote><p>任意值 Any 用来表示允许赋值为任意类型。</p></blockquote><h4 id="什么是任意值类型"><a href="#什么是任意值类型" class="headerlink" title="什么是任意值类型"></a>什么是任意值类型</h4><p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let num: number &#x3D; 1;num &#x3D; &#39;1&#39;;&#x2F;&#x2F; error TS2322: Type &#39;&quot;1&quot;&#39; is not assignable to type &#39;number&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是，如果是 any 类型，则允许被赋值为任意类型。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let num: any &#x3D; 1;num &#x3D; &#39;1&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也允许调用任何方法：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">let anyThing: any &#x3D; &#39;hello&#39;;anyThing.setName(&#39;muzidigbig&#39;);anyThing.setName(&#39;muzidigbig&#39;).sayHello();anyThing.name.setFirstName(&#39;Lee&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以认为，声明一个变量是任意值之后，对于它的任何操作返回的内容都是任意值类型。</p></blockquote><h4 id="未指定其类型进行初始赋值"><a href="#未指定其类型进行初始赋值" class="headerlink" title="未指定其类型进行初始赋值"></a>未指定其类型进行初始赋值</h4><p>遵循 <a href="https://zhuanlan.zhihu.com/p/86115873">类型推断</a> 的原则：</p><p>当类型没有给出时，TypeScript 编译器利用类型推断来推断类型。</p><p><strong>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型。</strong></p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">var num &#x3D; 2;  &#x2F;&#x2F;类型推断为 numberconsole.log(typeof num);num &#x3D; &#39;12&#39;; &#x2F;&#x2F;编译错误&#x2F;&#x2F;error TS2322: Type &#39;&quot;12&quot;&#39; is not assignable to type &#39;number&#39;.console.log(typeof num);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令大全</title>
      <link href="2020/11/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>2020/11/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p><code>cd /home</code>              进入 ‘/ home’ 目录’<br><code>cd ..</code>                 返回上一级目录<br><code>cd ../..</code>              返回上两级目录<br><code>cd</code>                    进入个人的主目录<br><code>cd ~user1</code>             进入个人的主目录<br><code>cd -</code>                  返回上次所在的目录<br><code>pwd</code>                   显示工作路径<br><code>ls</code>                    查看目录中的文件<br><code>ls -F</code>                 查看目录中的文件<br><code>ls -l</code>                 显示文件和目录的详细资料<br><code>ls -a</code>                 显示隐藏文件<br><code>ls *[0-9]*</code>            显示包含数字的文件名和目录名<br><code>tree</code>                  显示文件和目录由根目录开始的树形结构<br><code>lstree</code>                显示文件和目录由根目录开始的树形结构<br><code>mkdir dir1</code>            创建一个叫做 ‘dir1’ 的目录<br><code>mkdir dir1 dir2</code>       同时创建两个目录<br><code>mkdir -p /tmp/dir1/dir2</code>       创建一个目录树<br><code>rm -f file1</code>                   删除一个叫做 ‘file1’ 的文件<br><code>rmdir dir1</code>                    删除一个叫做 ‘dir1’ 的目录<br><code>rm -rf dir1</code>                   删除一个叫做 ‘dir1’ 的目录并同时删除其内容<br><code>rm -rf dir1 dir2</code>              同时删除两个目录及它们的内容<br><code>mv dir1 new_dir</code>               重命名/移动 一个目录<br><code>cp file1 file2</code>                复制一个文件<br><code>cp dir/* .</code>                    复制一个目录下的所有文件到当前工作目录<br><code>cp -a /tmp/dir1 .</code>             复制一个目录到当前工作目录<br><code>cp -a dir1 dir2</code>               复制一个目录<br><code>ln -s file1 lnk1</code>              创建一个指向文件或目录的软链接<br><code>ln file1 lnk1</code>                 创建一个指向文件或目录的物理链接<br><code>touch -t 0712250000 file1</code>     修改一个文件或目录的时间戳 - (YYMMDDhhmm)<br><code>iconv -l</code>                      列出已知的编码</p><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><p><code>arch</code> 显示机器的处理器架构<br><code>uname -m</code> 显示机器的处理器架构<br><code>uname -r</code> 显示正在使用的内核版本<br><code>dmidecode -q</code> 显示硬件系统部件 - (SMBIOS / DMI)<br><code>hdparm -i /dev/hda</code> 罗列一个磁盘的架构特性<br><code>hdparm -tT /dev/sda</code> 在磁盘上执行测试性读取操作<br><code>cat /proc/cpuinfo</code> 显示CPU info的信息<br><code>cat /proc/interrupts</code> 显示中断<br><code>cat /proc/meminfo</code> 校验内存使用<br><code>cat /proc/swaps</code> 显示哪些swap被使用<br><code>cat /proc/version</code> 显示内核的版本<br><code>cat /proc/net/dev</code> 显示网络适配器及统计<br><code>cat /proc/mounts</code> 显示已加载的文件系统<br><code>lspci -tv</code> 罗列 PCI 设备<br><code>lsusb -tv</code> 显示 USB 设备<br><code>date</code> 显示系统日期<br><code>cal 2007</code> 显示2007年的日历表<br><code>date 041217002007.00</code> 设置日期和时间 - 月日时分年.秒<br><code>clock -w</code> 将时间修改保存到 BIOS</p><h3 id="关机-系统的关机、重启等"><a href="#关机-系统的关机、重启等" class="headerlink" title="关机 (系统的关机、重启等)"></a>关机 (系统的关机、重启等)</h3><p><code>shutdown -h now</code> 关闭系统<br><code>init 0</code> 关闭系统<br><code>telinit 0</code> 关闭系统<br><code>shutdown -h hours:minutes &amp;</code> 按预定时间关闭系统<br><code>shutdown -c</code> 取消按预定时间关闭系统<br><code>shutdown -r now</code> 重启<br><code>reboot</code> 重启<br><code>logout</code> 注销</p><h3 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h3><p><code>df -h</code> 显示已经挂载的分区列表<br><code>ls -lSr |more</code> 以尺寸大小排列文件和目录<br><code>du -sh dir1 估算目录 &#39;dir1&#39;</code> 已经使用的磁盘空间<br><code>du -sk * | sort -rn</code> 以容量大小为依据依次显示文件和目录的大小<br><code>rpm -q -a --qf &#39;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#39; | sort -k1,1n</code> 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)<br><code>dpkg-query -W -f=&#39;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#39; | sort -k1,1n</code> 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p><h3 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h3><p><code>find / -name file1</code> 从 ‘/‘ 开始进入根文件系统搜索文件和目录<br><code>find / -user user1</code> 搜索属于用户 ‘user1’ 的文件和目录<br><code>find /home/user1 -name \*.bin</code> 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件<br><code>find /usr/bin -type f -atime +100</code> 搜索在过去100天内未被使用过的执行文件<br><code>find /usr/bin -type f -mtime -10</code> 搜索在10天内被创建或者修改过的文件<br><code>find / -name \*.rpm -exec chmod 755 &#39;&#123;&#125;&#39; \;</code> 搜索以 ‘.rpm’ 结尾的文件并定义其权限<br><code>find / -xdev -name \*.rpm</code> 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备<br><code>locate \*.ps 寻找以 &#39;.ps&#39;</code> 结尾的文件 - 先运行 ‘updatedb’ 命令<br><code>whereis halt</code> 显示一个二进制文件、源码或man的位置<br><code>which halt</code> 显示一个二进制文件或可执行文件的完整路径</p><h3 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h3><p><code>mount /dev/hda2 /mnt/hda2</code> 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在<br><code>umount /dev/hda2</code> 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出<br><code>fuser -km /mnt/hda2</code> 当设备繁忙时强制卸载<br><code>umount -n /mnt/hda2</code> 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用<br><code>mount /dev/fd0 /mnt/floppy</code> 挂载一个软盘<br><code>mount /dev/cdrom /mnt/cdrom</code> 挂载一个cdrom或dvdrom<br><code>mount /dev/hdc /mnt/cdrecorder</code> 挂载一个cdrw或dvdrom<br><code>mount /dev/hdb /mnt/cdrecorder</code> 挂载一个cdrw或dvdrom<br><code>mount -o loop file.iso /mnt/cdrom</code> 挂载一个文件或ISO镜像文件<br><code>mount -t vfat /dev/hda5 /mnt/hda5</code> 挂载一个Windows FAT32文件系统<br><code>mount /dev/sda1 /mnt/usbdisk</code> 挂载一个usb 捷盘或闪存设备<br><code>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share</code> 挂载一个windows网络共享</p><h3 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h3><p><code>groupadd group_name</code> 创建一个新用户组<br><code>groupdel group_name</code> 删除一个用户组<br><code>groupmod -n new_group_name old_group_name</code> 重命名一个用户组<br><code>useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1</code> 创建一个属于 “admin” 用户组的用户<br><code>useradd user1</code> 创建一个新用户<br><code>userdel -r user1</code> 删除一个用户 ( ‘-r’ 排除主目录)<br><code>usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1</code> 修改用户属性<br><code>passwd</code> 修改口令<br><code>passwd user1</code> 修改一个用户的口令 (只允许root执行)<br><code>chage -E 2005-12-31 user1</code> 设置用户口令的失效期限<br><code>pwck</code> 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户<br><code>grpck</code> 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组<br><code>newgrp group_name</code> 登陆进一个新的群组以改变新创建文件的预设群组</p><h3 id="文件的权限-–-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-–-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 – (使用 “+” 设置权限，使用 “-“ 用于取消)"></a>文件的权限 – (使用 “+” 设置权限，使用 “-“ 用于取消)</h3><p><code>ls -lh</code> 显示权限<br><code>ls /tmp | pr -T5 -W$COLUMNS</code> 将终端划分成5栏显示<br><code>chmod ugo+rwx directory1</code> 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限<br><code>chmod go-rwx directory1</code> 删除群组(g)与其他人(o)对目录的读写执行权限<br><code>chown user1 file1</code> 改变一个文件的所有人属性<br><code>chown -R user1 directory1</code> 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<br><code>chgrp group1 file1</code> 改变文件的群组<br><code>chown user1:group1 file1</code> 改变一个文件的所有人和群组属性<br><code>find / -perm -u+s</code> 罗列一个系统中所有使用了SUID控制的文件<br><code>chmod u+s /bin/file1</code> 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限<br><code>chmod u-s /bin/file1</code> 禁用一个二进制文件的 SUID位<br><code>chmod g+s /home/public</code> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的<br><code>chmod g-s /home/public</code> 禁用一个目录的 SGID 位<br><code>chmod o+t /home/public</code> 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件<br><code>chmod o-t /home/public</code> 禁用一个目录的 STIKY 位</p><h3 id="文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><p><code>chattr +a file1</code> 只允许以追加方式读写文件<br><code>chattr +c file1</code> 允许这个文件能被内核自动压缩/解压<br><code>chattr +d file1</code> 在进行文件系统备份时，dump程序将忽略这个文件<br><code>chattr +i file1</code> 设置成不可变的文件，不能被删除、修改、重命名或者链接<br><code>chattr +s file1</code> 允许一个文件被安全地删除<br><code>chattr +S file1</code> 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘<br><code>chattr +u file1</code> 若文件被删除，系统会允许你在以后恢复这个被删除的文件<br><code>lsattr</code> 显示特殊的属性</p><h3 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h3><p><code>bunzip2 file1.bz2</code> 解压一个叫做 ‘file1.bz2’的文件<br><code>bzip2 file1</code> 压缩一个叫做 ‘file1’ 的文件<br><code>gunzip file1.gz</code> 解压一个叫做 ‘file1.gz’的文件<br><code>gzip file1</code> 压缩一个叫做 ‘file1’的文件<br><code>gzip -9 file1</code> 最大程度压缩<br><code>rar a file1.rar test_file</code> 创建一个叫做 ‘file1.rar’ 的包<br><code>rar a file1.rar file1 file2 dir1</code> 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’<br><code>unrar x file1.rar</code> 解压rar包<br><code>tar -cvf archive.tar file1</code> 创建一个非压缩的 tarball<br><code>tar -cvf archive.tar file1 file2 dir1</code> 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件<br><code>tar -tf archive.tar</code> 显示一个包中的内容<br><code>tar -xvf archive.tar</code> 释放一个包<br><code>tar -xvf archive.tar -C /tmp</code> 将压缩包释放到 /tmp目录下<br><code>tar -cvfj archive.tar.bz2 dir1</code> 创建一个bzip2格式的压缩包<br><code>tar -jxvf archive.tar.bz2</code> 解压一个bzip2格式的压缩包<br><code>tar -cvfz archive.tar.gz</code> dir1 创建一个gzip格式的压缩包<br><code>tar -zxvf archive.tar.gz</code> 解压一个gzip格式的压缩包<br><code>zip file1.zip file1</code> 创建一个zip格式的压缩包<br><code>zip -r file1.zip file1 file2 dir1</code> 将几个文件和目录同时压缩成一个zip格式的压缩包<br><code>unzip file1.zip</code> 解压一个zip格式压缩包</p><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><p><code>cat file1</code> 从第一个字节开始正向查看文件的内容<br><code>tac file1</code> 从最后一行开始反向查看一个文件的内容<br><code>more file1</code> 查看一个长文件的内容<br><code>less file1</code> 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作<br><code>head -2 file1</code> 查看一个文件的前两行<br><code>tail -2 file1</code> 查看一个文件的最后两行<br><code>tail -f /var/log/messages</code> 实时查看被添加到一个文件中的内容</p><h3 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h3><p><code>badblocks -v /dev/hda1</code> 检查磁盘hda1上的坏磁块<br><code>fsck /dev/hda1</code> 修复/检查hda1磁盘上linux文件系统的完整性<br><code>fsck.ext2 /dev/hda1</code> 修复/检查hda1磁盘上ext2文件系统的完整性<br><code>e2fsck /dev/hda1</code> 修复/检查hda1磁盘上ext2文件系统的完整性<br><code>e2fsck -j /dev/hda1</code> 修复/检查hda1磁盘上ext3文件系统的完整性<br><code>fsck.ext3 /dev/hda1</code> 修复/检查hda1磁盘上ext3文件系统的完整性<br><code>fsck.vfat /dev/hda1</code> 修复/检查hda1磁盘上fat文件系统的完整性<br><code>fsck.msdos /dev/hda1</code> 修复/检查hda1磁盘上dos文件系统的完整性<br><code>dosfsck /dev/hda1</code> 修复/检查hda1磁盘上dos文件系统的完整性</p><h3 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h3><p><code>mkfs /dev/hda1</code> 在hda1分区创建一个文件系统<br><code>mke2fs /dev/hda1</code> 在hda1分区创建一个linux ext2的文件系统<br><code>mke2fs -j /dev/hda1</code> 在hda1分区创建一个linux ext3(日志型)的文件系统<br><code>mkfs -t vfat 32 -F /dev/hda1</code> 创建一个 FAT32 文件系统<br><code>fdformat -n /dev/fd0</code> 格式化一个软盘<br><code>mkswap /dev/hda3</code> 创建一个swap文件系统</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作笔记</title>
      <link href="2020/11/03/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2020/11/03/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://git-scm.com/download/linux">官方教程</a></p><h3 id="git配置github与gitlab同时使用"><a href="#git配置github与gitlab同时使用" class="headerlink" title="git配置github与gitlab同时使用"></a>git配置github与gitlab同时使用</h3><ol><li><code>git bash</code> 运行命令<code>ls -al ~/.ssh</code>，查看.ssh文件下是否有生成秘钥文件</li><li>如果目录下没有<code>.ssh</code>文件，使用<code>mkdir ~/.ssh</code>生成<code>.ssh</code>文件，同时<code>chmod 700 ~/.ssh</code>给权限</li><li>如果有<code>.ssh</code>文件，运行<code>cd ~/.ssh</code>到<code>.ssh</code>文件下，输入<code>ls</code>命令查看秘钥文件</li><li>生成秘钥文件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 生成github秘钥</span>ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span><span class="token constant">C</span> <span class="token string">'github登录的邮箱'</span> <span class="token operator">-</span>f <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_github<span class="token comment">// -t指定秘钥类型，默认rsa</span><span class="token comment">// -C 设置注释文字，比如邮箱</span><span class="token comment">// -f 指定秘钥文件名称</span><span class="token comment">// 按enter，不输入用户名与密码</span><span class="token comment">// 会生成文件名为id_rsa_github与id_rsa_github.pub两个文件</span><span class="token comment">// 同理生成gitlab秘钥</span>ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span><span class="token constant">C</span> <span class="token string">'gitlab登录的邮箱'</span> <span class="token operator">-</span>f <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_gitlab<span class="token comment">// 会生成文件名为id_rsa_gitlab与id_rsa_gitlab.pub两个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>运行ls命令应该就可以看到生成的秘钥文件了，把id_rsa_github.pub与id_rsa_gitlab.pub文件分别存放到github与gitlab的Settings中的SSH Keys中即可</li><li>配置.ssh文件下的config文件</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 进入.ssh文件</span>cd <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token comment">// 给config文件添加权限，不然在vim文件保存时会提示权限不足</span><span class="token comment">// 错误提示</span><span class="token comment">// .ssh/config" E212: Can't open file for writing</span><span class="token comment">// Press ENTER or type command to continue</span>sudo touch configsudo chown root<span class="token operator">:</span>root configsudo chmod <span class="token number">755</span> configvim config<span class="token comment">// 在config文件中输入下面内容，注意文件名id_rsa_gitlab与id_rsa_github写为自己的文件名</span>#gitlabHost gitlab      HostName xiaoyi<span class="token punctuation">.</span>com <span class="token comment">//写自己公司的gitlab网址</span>      PreferredAuthentications publickey      IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_gitlab#githubHost github        AddKeysToAgent yes        UseKeychain yes        HostName github<span class="token punctuation">.</span>com        PreferredAuthentications publickey        IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_github<span class="token comment">// 输入结束后按esc，退出vim编辑模式，按i进入vim编辑模式</span><span class="token comment">// 输入shift+:，然后输入wq，保存并退出vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>运行命令<code>sudo ssh-add ~/.ssh/id_rsa_gitlab</code>与<code>sudo ssh-add ~/.ssh/id_rsa_github</code>，一定要执行</li><li>运行命令<code>sudo ssh -T git@github.com</code>与<code>sudo ssh -T git@gitlab.com</code>，测试一下是否成功</li></ol><h3 id="安装卸载"><a href="#安装卸载" class="headerlink" title="安装卸载"></a>安装卸载</h3><p><strong>yum 卸载 git 安装新版本</strong><br>卸载低版本的 <code>git</code>，安装高版本或者新版本的 <code>git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载老的版本</span>yum remove <span class="token function">git</span><span class="token comment"># 安装新的版本</span>yum <span class="token function">install</span> git2u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><p>首先是配置帐号信息 <code>ssh -T git@github.com</code> 测试。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> config    <span class="token comment"># 获取帮助信息，查看修改个人信息的参数  </span><span class="token function">git</span> config --list  <span class="token comment"># 查看配置的信息</span><span class="token function">git</span> config --global user.name <span class="token string">"xiaoyi"</span>          <span class="token comment"># 修改全局名字</span><span class="token function">git</span> config --global user.email <span class="token string">"963132341@qq.com"</span>  <span class="token comment"># 修改全局邮箱</span><span class="token function">git</span> config --global --unset <span class="token operator">&lt;</span>entry-name<span class="token operator">></span>  <span class="token comment"># 删除全局设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h3><p>不再将文件的权限变化视作改动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config core.fileMode <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置大小写敏感"><a href="#设置大小写敏感" class="headerlink" title="设置大小写敏感"></a>设置大小写敏感</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --get core.ignorecase <span class="token comment"># 查看git 的设置</span><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span> <span class="token comment"># 设置大小写敏感</span><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token operator">&lt;</span>目录/文件<span class="token operator">></span>  <span class="token comment"># 远程有俩相同目录，通过这种方式清除掉，然后提交记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置自动换行"><a href="#配置自动换行" class="headerlink" title="配置自动换行"></a>配置自动换行</h3><p>自动转换坑太大，提交到git是自动将换行符转换为lf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.autocrlf input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建SSH密钥"><a href="#创建SSH密钥" class="headerlink" title="创建SSH密钥"></a>创建SSH密钥</h3><p>这个密钥用来跟 github 通信，在本地终端里生成然后上传到 github</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">'963132341@qq.com'</span> <span class="token comment"># 生成密钥  </span>ssh-keygen -t rsa -C <span class="token string">"963132341@qq.com"</span> -f ~/.ssh/ww_rsa <span class="token comment"># 指定生成目录文件名字</span><span class="token function">ssh</span> -T git@github.com <span class="token comment"># 测试是否成功  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="多账号ssh配置"><a href="#多账号ssh配置" class="headerlink" title="多账号ssh配置"></a>多账号ssh配置</h3><p><strong>1.生成指定名字的密钥</strong><br><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot; -f ~/.ssh/jslite_rsa</code><br>会生成 <code>jslite_rsa</code> 和 <code>jslite_rsa.pub</code> 这两个文件  </p><p><strong>2.密钥复制到托管平台上</strong><br><code>vim ~/.ssh/jslite_rsa.pub</code><br>打开公钥文件 <code>jslite_rsa.pub</code> ，并把内容复制至代码托管平台上</p><p><strong>3.修改config文件</strong><br><code>vim ~/.ssh/config</code> #修改config文件，如果没有创建 <code>config</code>  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Host jslite.github.com  HostName github.com  User <span class="token function">git</span>  IdentityFile ~/.ssh/jslite_rsaHost work.github.com  HostName github.com  <span class="token comment"># Port 服务器open-ssh端口（默认：22,默认时一般不写此行）</span>  <span class="token comment"># PreferredAuthentications 配置登录时用什么权限认证 </span>  <span class="token comment">#                          publickey|password publickey|keyboard-interactive等</span>  User <span class="token function">git</span>  IdentityFile ~/.ssh/work_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Host</code> 这里是个别名可以随便命名</li><li><code>HostName</code> 一般是网站如：<code>git@ss.github.com:username/repo.git</code> 填写 <code>github.com</code></li><li><code>User</code> 通常填写<code>git</code></li><li><code>IdentityFile</code> 使用的公钥文件地址</li></ul><p><strong>4.测试</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@jslite.github.com  <span class="token comment"># `@`后面跟上定义的Host  </span><span class="token function">ssh</span> -T work.github.com        <span class="token comment"># 通过别名测试</span><span class="token function">ssh</span> -i ~/公钥文件地址 Host别名  <span class="token comment"># 如 ssh -i ~/.ssh/work_rsa work.github.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>5.使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 原来的写法</span><span class="token function">git</span> clone git@github.com:<span class="token operator">&lt;</span>jslite的用户名<span class="token operator">></span>/learngit.git<span class="token comment"># 现在的写法</span><span class="token function">git</span> clone git@jslite.github.com:<span class="token operator">&lt;</span>jslite的用户名<span class="token operator">></span>/learngit.git<span class="token function">git</span> clone git@work.github.com:<span class="token operator">&lt;</span>work的用户名<span class="token operator">></span>/learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.注意</strong></p><p>如果你修改了id_rsa的名字，你需要将ssh key添加到SSH agent中，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-add ~/.ssh/jslite_rsassh-add -l  <span class="token comment"># 查看所有的key</span>ssh-add -D  <span class="token comment"># 删除所有的key</span>ssh-add -d  ~/.ssh/jslite_rsa <span class="token comment"># 删除指定的key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="免密码登录远程服务器"><a href="#免密码登录远程服务器" class="headerlink" title="免密码登录远程服务器"></a>免密码登录远程服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -P <span class="token string">''</span> -f ~/.ssh/aliyunserver.key$ ssh-copy-id -i ~/.ssh/aliyunserver.key.pub root@192.168.182.112 <span class="token comment"># 这里需要输入密码一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑 <code>~/.ssh/config</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host aliyun1  HostName <span class="token number">192.168</span>.182.112  User root  PreferredAuthentications publickey  IdentityFile ~/.ssh/aliyunserver.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面配置完了，可以通过命令登录，不需要输入IP地址和密码 <code>ssh aliyun1</code></p><h3 id="https协议下提交代码免密码"><a href="#https协议下提交代码免密码" class="headerlink" title="https协议下提交代码免密码"></a>https协议下提交代码免密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/username/rep.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过上面方式克隆可能需要密码，解决办法：进入当前克隆的项目 <code>vi rep/.git/config</code> 编辑 <code>config</code>, 按照下面方式修改，你就可以提交代码不用输入密码了。</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">[core]repositoryformatversion = 0filemode = truebare = falselogallrefupdates = trueignorecase = trueprecomposeunicode = true[remote "origin"]<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">url = https://github.com/username/rep.git</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">url = https://用户名:密码@github.com/username/rep.git</span></span>fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]remote = originmerge = refs/heads/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件推向3个git库"><a href="#文件推向3个git库" class="headerlink" title="文件推向3个git库"></a>文件推向3个git库</h3><p><strong>1. 增加3个远程库地址</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/JSLite/JSLite.git  <span class="token function">git</span> remote set-url --add origin https://gitlab.com/wang/JSLite.js.git  <span class="token function">git</span> remote set-url --add origin https://oschina.net/wang/JSLite.js.git  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2. 删除其中一个 set-url 地址</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">usage: <span class="token function">git</span> remote set-url <span class="token punctuation">[</span>--push<span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>newurl<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>oldurl<span class="token operator">></span><span class="token punctuation">]</span>   or: <span class="token function">git</span> remote set-url --add <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>newurl<span class="token operator">></span>   or: <span class="token function">git</span> remote set-url --delete <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git remote set-url --delete origin https://oschina.net/wang/JSLite.js.git</code></p><p><strong>3.推送代码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span class="token function">git</span> push -f origin master  <span class="token comment"># 强制推送  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4.拉代码</strong></p><p>只能拉取 <code>origin</code> 里的一个url地址，这个fetch-url<br>默认为你添加的到 <code>origin</code>的第一个地址  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> pull origin master   <span class="token function">git</span> pull --all <span class="token comment"># 获取远程所有内容包括tag  </span><span class="token function">git</span> pull origin next:master <span class="token comment"># 取回origin主机的next分支，与本地的master分支合并  </span><span class="token function">git</span> pull origin next <span class="token comment"># 远程分支是与当前分支合并  </span><span class="token comment"># 上面一条命令等同于下面两条命令   </span><span class="token function">git</span> fetch origin  <span class="token function">git</span> merge origin/next  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。<br>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> pull -p<span class="token comment"># 等同于下面的命令</span>$ <span class="token function">git</span> fetch --prune origin $ <span class="token function">git</span> fetch -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.更改pull</strong></p><p>只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接。    </p><h3 id="修改远程仓库地址"><a href="#修改远程仓库地址" class="headerlink" title="修改远程仓库地址"></a>修改远程仓库地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote remove origin  <span class="token comment"># 删除该远程路径  </span><span class="token function">git</span> remote <span class="token function">add</span> origin git@jslite.github.com:JSLite/JSLite.git  <span class="token comment"># 添加远程路径 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="撤销远程记录"><a href="#撤销远程记录" class="headerlink" title="撤销远程记录"></a>撤销远程记录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reset --hard HEAD~1 <span class="token comment"># 撤销一条记录   </span><span class="token function">git</span> push -f origin HEAD:master <span class="token comment"># 同步到远程仓库  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="放弃本地的文件修改"><a href="#放弃本地的文件修改" class="headerlink" title="放弃本地的文件修改"></a>放弃本地的文件修改</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reset --hard FETCH_HEAD <span class="token comment"># FETCH_HEAD表示上一次成功git pull之后形成的commit点。然后git pull</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git reset --hard FETCH_HEAD</code> 出现错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pullYou are not currently on a branch, so I cannot use any<span class="token string">'branch.&lt;branchname>.merge'</span> <span class="token keyword">in</span> your configuration file.Please specify <span class="token function">which</span> remote branch you want to use on the <span class="token builtin class-name">command</span>line and try again <span class="token punctuation">(</span>e.g. <span class="token string">'git pull &lt;repository> &lt;refspec>'</span><span class="token punctuation">)</span>.See git-pull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> FOR details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b temp <span class="token comment"># 新建+切换到temp分支 </span><span class="token function">git</span> checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="最简单放弃本地修改内容"><a href="#最简单放弃本地修改内容" class="headerlink" title="最简单放弃本地修改内容"></a>最简单放弃本地修改内容</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果有的修改以及加入暂存区的话</span><span class="token function">git</span> reset --hard <span class="token comment"># 还原所有修改，不会删除新增的文件</span><span class="token function">git</span> checkout <span class="token builtin class-name">.</span> <span class="token comment"># 下面命令会删除新增的文件</span><span class="token function">git</span> clean -xdf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过存储暂存区stash，在删除暂存区的方法放弃本地修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> stash drop <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="回退到某一个版本"><a href="#回退到某一个版本" class="headerlink" title="回退到某一个版本"></a>回退到某一个版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>hash<span class="token operator">></span><span class="token comment"># 例如 git reset --hard a3hd73r</span><span class="token comment"># --hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，</span><span class="token comment"># --soft参数代表保留工作区的修改。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索-commit-历史记录"><a href="#搜索-commit-历史记录" class="headerlink" title="搜索 commit 历史记录"></a>搜索 commit 历史记录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> log --grep<span class="token operator">=</span><span class="token number">224</span><span class="token comment"># 这条命令是查看含有 "224" 关键字的 git commit </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="回滚到某个commit提交"><a href="#回滚到某个commit提交" class="headerlink" title="回滚到某个commit提交"></a>回滚到某个commit提交</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> revert HEAD~1 <span class="token comment"># 撤销一条记录 会弹出 commit 编辑</span><span class="token function">git</span> push <span class="token comment"># 提交回滚</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="去掉某个commit"><a href="#去掉某个commit" class="headerlink" title="去掉某个commit"></a>去掉某个commit</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 实质是新建了一个与原来完全相反的commit，抵消了原来commit的效果</span><span class="token function">git</span> revert <span class="token operator">&lt;</span>commit-hash<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h3><p>对两个分支，同时都拥有的文件，进行修改后，再同时 <code>commit</code> 到这两个分支，比如 <code>master</code> 分支和 <code>branch1</code> 分支，都拥有文件 <code>test.js</code> ，在 <code>master</code> 或者 <code>branch1</code> 分支下对 <code>test.js</code> 进行修改后，把修改的 <code>test.js</code> 同时提交到 <code>master</code> 分支和 <code>branch1</code> 分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch-name<span class="token operator">></span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commit-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取最近一次提交的-commit-id"><a href="#获取最近一次提交的-commit-id" class="headerlink" title="获取最近一次提交的 commit id"></a>获取最近一次提交的 commit id</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rev-parse HEAD <span class="token comment"># e10721cb8859b2cd340d31a52ef4bf4b9629ddda</span><span class="token function">git</span> rev-parse --short HEAD <span class="token comment"># e10721c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="两个-git-仓库合并"><a href="#两个-git-仓库合并" class="headerlink" title="两个 git 仓库合并"></a>两个 git 仓库合并</h3><p>现在有两个仓库 <a href="https://github.com/kktjs/kkt.git">kktjs/kkt</a> 和 <a href="https://github.com/kktjs/kkt-next.git">kktjs/kkt-next</a> 我们需要将 <code>kkt-next</code> 仓库合并到 <code>kkt</code> 并保留 <code>kkt-next</code> 的所有提交内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 克隆主仓库代码</span><span class="token function">git</span> clone git@github.com:kktjs/kkt.git<span class="token comment"># 2. 将 kkt-next 作为远程仓库，添加到 kkt 中，设置别名为 other</span><span class="token function">git</span> remote <span class="token function">add</span> other git@github.com:kktjs/kkt-next.git<span class="token comment"># 3. 从 kkt-next 仓库中拉取数据到本仓库</span><span class="token function">git</span> fetch other<span class="token comment"># 4. 将 kkt-next 仓库拉取的 master 分支作为新分支 checkout 到本地，新分支名设定为 kkt-next</span><span class="token function">git</span> checkout -b kkt-next other/master<span class="token comment"># 5. 切换回 kkt 的 master 分支</span><span class="token function">git</span> checkout master<span class="token comment"># 6. 将 kkt-next 合并入 kkt 的 master 分支</span><span class="token function">git</span> merge kkt-next<span class="token comment"># 如果第 6 步报错 `fatal: refusing to merge unrelated histories`</span><span class="token comment"># 请执行下面命令 ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><span class="token function">git</span> merge kkt-next --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在合并时有可能两个分支对同一个文件都做了修改，这时需要解决冲突，对文本文件来说很简单，根据需要对冲突的位置进行处理就可以。对于二进制文件，需要用到如下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout --theirs YOUR_BINARY_FILES     <span class="token comment"># 保留需要合并进来的分支的修改</span><span class="token function">git</span> checkout --ours YOUR_BINARY_FILES       <span class="token comment"># 保留自己的修改</span><span class="token function">git</span> <span class="token function">add</span> YOUR_BINARY_FILES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="合并多个commit"><a href="#合并多个commit" class="headerlink" title="合并多个commit"></a>合并多个commit</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这个命令，将最近4个commit合并为1个，HEAD代表当前版本。</span><span class="token comment"># 将进入VIM界面，你可以修改提交信息。</span><span class="token function">git</span> rebase -i HEAD~4 <span class="token comment"># 可以看到其中分为两个部分，上方未注释的部分是填写要执行的指令，</span><span class="token comment"># 而下方注释的部分则是指令的提示说明。指令部分中由前方的命令名称、commit hash 和 commit message 组成</span><span class="token comment"># 当前我们只要知道 pick 和 squash 这两个命令即可。</span><span class="token comment"># --> pick 的意思是要会执行这个 commit</span><span class="token comment"># --> squash 的意思是这个 commit 会被合并到前一个commit</span><span class="token comment"># 我们将 需要保留的 这个 commit 前方的命令改成 squash 或 s，然后输入:wq以保存并退出</span><span class="token comment"># 这是我们会看到 commit message 的编辑界面</span><span class="token comment"># 其中, 非注释部分就是两次的 commit message, 你要做的就是将这两个修改成新的 commit message。</span><span class="token comment"># </span><span class="token comment"># 输入wq保存并推出, 再次输入git log查看 commit 历史信息，你会发现这两个 commit 已经合并了。</span><span class="token comment"># 将修改强制推送到前端</span><span class="token function">git</span> push -f origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改远程Commit记录"><a href="#修改远程Commit记录" class="headerlink" title="修改远程Commit记录"></a>修改远程Commit记录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span class="token comment"># amend只能修改没有提交到线上的，最后一次commit记录</span><span class="token function">git</span> rebase -i HEAD~3<span class="token comment"># 表示要修改当前版本的倒数第三次状态</span><span class="token comment"># 将要更改的记录行首单词 pick 改为 edit</span>pick 96dc3f9 doc: Update quick-start.mdpick f1cce8a test<span class="token punctuation">(</span>Transition<span class="token punctuation">)</span>:Add transition <span class="token builtin class-name">test</span> <span class="token punctuation">(</span><span class="token comment">#47)</span>pick <span class="token number">6293516</span> feat<span class="token punctuation">(</span>Divider<span class="token punctuation">)</span>: Add Divider component.<span class="token comment"># Rebase eeb03a4..6293516 onto eeb03a4 (3 commands)</span><span class="token comment">#</span><span class="token comment"># Commands:</span><span class="token comment"># p, pick = use commit</span><span class="token comment"># r, reword = use commit, but edit the commit message</span><span class="token comment"># e, edit = use commit, but stop for amending</span><span class="token comment"># s, squash = use commit, but meld into previous commit</span><span class="token comment"># f, fixup = like "squash", but discard this commit's log message</span><span class="token comment"># x, exec = run command (the rest of the line) using shell</span><span class="token comment"># d, drop = remove commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存并退出，会弹出下面提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># You can amend the commit now, with</span><span class="token comment"># </span><span class="token comment">#   git commit --amend</span><span class="token comment"># </span><span class="token comment"># Once you are satisfied with your changes, run</span><span class="token comment"># </span><span class="token comment">#   git rebase --continue</span><span class="token comment"># 通过这条命令进入编辑页面更改commit，保存退出</span><span class="token function">git</span> commit --amend<span class="token comment"># 保存退出确认修改，继续执行 rebase, </span><span class="token function">git</span> rebase --continue<span class="token comment"># 如果修改多条记录反复执行上面两条命令直到完成所有修改</span><span class="token comment"># 最后，确保别人没有提交进行push，最好不要加 -f 强制推送</span><span class="token function">git</span> push -f origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用commit关闭一个issue"><a href="#利用commit关闭一个issue" class="headerlink" title="利用commit关闭一个issue"></a>利用commit关闭一个issue</h3><p>这个功能在Github上可以玩儿，Gitlab上特别老的版本不能玩儿哦，那么如何跟随着commit关闭一个issue呢? 在confirm merge的时候可以使用一下命令来关闭相关issue:  </p><p><code>fixes #xxx</code>、 <code>fixed #xxx</code>、 <code>fix #xxx</code>、 <code>closes #xxx</code>、 <code>close #xxx</code>、 <code>closed #xxx</code>、</p><h3 id="新建一个空分支"><a href="#新建一个空分支" class="headerlink" title="新建一个空分支"></a>新建一个空分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这种方式新建的分支(gh-pages)是没有 commit 记录的</span><span class="token function">git</span> checkout --orphan gh-pages<span class="token comment"># 删除新建的gh-pages分支原本的内容，如果不删除，提交将作为当前分支的第一个commit</span><span class="token function">git</span> <span class="token function">rm</span> -rf <span class="token builtin class-name">.</span><span class="token comment"># 查看一下状态 有可能上面一条命令，没有删除还没有提交的的文件</span><span class="token function">git</span> state <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><pre class="line-numbers language-none"><code class="language-none">echo node_modules&#x2F; &gt;&gt; .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> update-index --assume-unchanged path/to/file <span class="token comment"># 关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</span><span class="token function">git</span> update-index --no-assume-unchanged path/to/file <span class="token comment"># 恢复 track 指定文件的改动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="同步fork的上游仓库"><a href="#同步fork的上游仓库" class="headerlink" title="同步fork的上游仓库"></a>同步fork的上游仓库</h3><p><a href="https://help.github.com/articles/syncing-a-fork/">Github教程同步fork教程</a>，<a href="http://www.miss77.net/549.html">在Github上同步一个分支(fork)</a>  </p><p><strong>设置添加多个远程仓库地址。</strong></p><p>在同步之前，需要创建一个远程点指向上游仓库(repo).如果你已经派生了一个原始仓库，可以按照如下方法做。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> remote -v<span class="token comment"># List the current remotes （列出当前远程仓库）</span><span class="token comment"># origin  https://github.com/user/repo.git (fetch)</span><span class="token comment"># origin  https://github.com/user/repo.git (push)</span>$ <span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/otheruser/repo.git<span class="token comment"># Set a new remote (设置一个新的远程仓库)</span>$ <span class="token function">git</span> remote -v<span class="token comment"># Verify new remote (验证新的原唱仓库)</span><span class="token comment"># origin    https://github.com/user/repo.git (fetch)</span><span class="token comment"># origin    https://github.com/user/repo.git (push)</span><span class="token comment"># upstream  https://github.com/otheruser/repo.git (fetch)</span><span class="token comment"># upstream  https://github.com/otheruser/repo.git (push)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>同步更新仓库内容</strong></p><p>同步上游仓库到你的仓库需要执行两步：首先你需要从远程拉去，之后你需要合并你希望的分支到你的本地副本分支。从上游的存储库中提取分支以及各自的提交内容。 <code>master</code> 将被存储在本地分支机构 <code>upstream/master</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> fetch upstream<span class="token comment"># remote: Counting objects: 75, done.</span><span class="token comment"># remote: Compressing objects: 100% (53/53), done.</span><span class="token comment"># remote: Total 62 (delta 27), reused 44 (delta 9)</span><span class="token comment"># Unpacking objects: 100% (62/62), done.</span><span class="token comment"># From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY</span><span class="token comment">#  * [new branch]      master     -> upstream/master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查你的 fork’s 本地 <code>master</code> 分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> checkout master<span class="token comment"># Switched to branch 'master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>合并来自 <code>upstream/master</code> 的更改到本地 master  分支上。  这使你的前 fork’s <code>master</code> 分支与上游资源库同步，而不会丢失你本地修改。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> merge upstream/master<span class="token comment"># Updating a422352..5fdff0f</span><span class="token comment"># Fast-forward</span><span class="token comment">#  README                    |    9 -------</span><span class="token comment">#  README.md                 |    7 ++++++</span><span class="token comment">#  2 files changed, 7 insertions(+), 9 deletions(-)</span><span class="token comment">#  delete mode 100644 README</span><span class="token comment">#  create mode 100644 README.md</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动合并冲突的-Pull-Request"><a href="#手动合并冲突的-Pull-Request" class="headerlink" title="手动合并冲突的 Pull Request"></a>手动合并冲突的 Pull Request</h3><p>以 <a href="https://github.com/tsbbjs/tsbb">tsbbjs/tsbb</a> 为例，合并来自 <a href="https://github.com/jaywcjlove/tsbb">jaywcjlove/tsbb</a> master分支的 <code>Pull Request</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 克隆主仓库</span><span class="token function">git</span> clone git@github.com:tsbbjs/tsbb.git <span class="token comment"># 2. 在主仓库 master 分支切个 jaywcjlove-master 分支出来，并且切换到 jaywcjlove-master 分支</span><span class="token function">git</span> checkout -b jaywcjlove-master master<span class="token comment"># 3. 获取 jaywcjlove/tsbb 仓库 master 分支最新代码</span><span class="token function">git</span> pull https://github.com/jaywcjlove/tsbb.git master<span class="token comment"># ⚠️ 注意下面是输出内容：</span><span class="token comment"># ----------------------</span><span class="token comment"># Auto-merging src/babel/transform.ts</span><span class="token comment"># CONFLICT (content): Merge conflict in src/babel/transform.ts</span><span class="token comment"># ----------------------</span><span class="token comment"># ⚠️ 注意上面 CONFLICT 标识是有冲突无法自动合并的代码，根据路径进入代码手动合并</span><span class="token comment"># 4. 合并完成之后，进行 commit 说明合并内容</span><span class="token function">git</span> commit -m <span class="token string">"Merge branch 'master' of github.com:jaywcjlove/tsbb #3"</span><span class="token comment"># 5. 切换到 master 分支，如果是 PR 其它分支，这里就切其它分支</span><span class="token function">git</span> checkout master<span class="token comment"># 6. 合并 jaywcjlove-master 分支的代码</span><span class="token function">git</span> merge --no-ff jaywcjlove-master<span class="token comment"># 7. 提交代码</span><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h3><pre class="line-numbers language-none"><code class="language-none">git commit --amend --author&#x3D;&#39;Author Name &lt;email@address.com&gt;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="批量修改历史commit中的名字和邮箱"><a href="#批量修改历史commit中的名字和邮箱" class="headerlink" title="批量修改历史commit中的名字和邮箱"></a>批量修改历史commit中的名字和邮箱</h3><p>这是 <a href="https://help.github.com/articles/changing-author-info/">Github官方教程</a></p><p><strong>1.克隆仓库</strong></p><p>注意参数，这个不是普通的clone，clone下来的仓库并不能参与开发</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --bare https://github.com/user/repo.git<span class="token builtin class-name">cd</span> repo.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2.命令行中运行代码</strong></p><p>OLD_EMAIL原来的邮箱<br>CORRECT_NAME更正的名字<br>CORRECT_EMAIL更正的邮箱  </p><p>将下面代码复制放到命令行中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> filter-branch -f --env-filter <span class="token string">'OLD_EMAIL="963132341@qq.com"CORRECT_NAME="xiaoyi"CORRECT_EMAIL="更正的邮箱@qq.com"if [ "<span class="token variable">$GIT_COMMITTER_EMAIL</span>" = "<span class="token variable">$OLD_EMAIL</span>" ]then    export GIT_COMMITTER_NAME="<span class="token variable">$CORRECT_NAME</span>"    export GIT_COMMITTER_EMAIL="<span class="token variable">$CORRECT_EMAIL</span>"fiif [ "<span class="token variable">$GIT_AUTHOR_EMAIL</span>" = "<span class="token variable">$OLD_EMAIL</span>" ]then    export GIT_AUTHOR_NAME="<span class="token variable">$CORRECT_NAME</span>"    export GIT_AUTHOR_EMAIL="<span class="token variable">$CORRECT_EMAIL</span>"fi'</span> --tag-name-filter <span class="token function">cat</span> -- --branches --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rewrite 160d4df2689ff6df3820563bfd13b5f1fb9ba832 <span class="token punctuation">(</span><span class="token number">479</span>/508<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">16</span> seconds passed, remaining <span class="token number">0</span> predicted<span class="token punctuation">)</span>Ref <span class="token string">'refs/heads/dev'</span> was rewrittenRef <span class="token string">'refs/heads/master'</span> was rewritten<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3.同步到远程仓库</strong></p><p>同步到push远程git仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push --force --tags origin <span class="token string">'refs/heads/*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我还遇到了如下面错误，lab默认给master分支加了保护，不允许强制覆盖。<code>Project(项目)</code>-&gt;<code>Setting</code>-&gt;<code>Repository</code> 菜单下面的<code>Protected branches</code>把master的保护去掉就可以了。修改完之后，建议把master的保护再加回来，毕竟强推不是件好事。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">remote: GitLab: You are not allowed to force push code to a protected branch on this project.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当上面的push 不上去的时候，先 <code>git pull</code> 确保最新代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull  --allow-unrelated-histories<span class="token comment"># 或者指定分枝</span><span class="token function">git</span> pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4. 删除仓库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token function">rm</span> -rf repo.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h3><pre class="line-numbers language-none"><code class="language-none">git whatchanged --since&#x3D;&#39;2 weeks ago&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看某个文件历史"><a href="#查看某个文件历史" class="headerlink" title="查看某个文件历史"></a>查看某个文件历史</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline 文件名  <span class="token comment"># 列出文件的所有改动历史  </span><span class="token function">git</span> show c178bf49   <span class="token comment"># 某次的改动的修改记录  </span><span class="token function">git</span> log -p c178bf49 <span class="token comment"># 某次的改动的修改记录  </span><span class="token function">git</span> blame 文件名     <span class="token comment"># 显示文件的每一行是在那个版本最后修改。  </span><span class="token function">git</span> whatchanged 文件名  <span class="token comment"># 显示某个文件的每个版本提交信息：提交日期，提交人员，版本号，提交备注（没有修改细节）  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看git仓库中最近修改的分支"><a href="#查看git仓库中最近修改的分支" class="headerlink" title="查看git仓库中最近修改的分支"></a>查看git仓库中最近修改的分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> for-each-ref --count<span class="token operator">=</span><span class="token number">30</span> --sort<span class="token operator">=</span>-committerdate refs/heads/ --format<span class="token operator">=</span><span class="token string">'%(refname:short)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更新所有本地分支"><a href="#更新所有本地分支" class="headerlink" title="更新所有本地分支"></a>更新所有本地分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token punctuation">\</span>  --format <span class="token string">"%(if)%(upstream:short)%(then)git push . %(upstream:short):%(refname:short)%(end)"</span> <span class="token operator">|</span>  <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="打造自己的git命令"><a href="#打造自己的git命令" class="headerlink" title="打造自己的git命令"></a>打造自己的git命令</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git config --global alias.st statusgit config --global alias.br branchgit config --global alias.co checkoutgit config --global alias.ci commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置好后再输入git命令的时候就不用再输入一大段了，例如我们要查看状态，只需：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">git st<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --merged master <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token string">'^\*\|  master'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -n <span class="token number">1</span> <span class="token function">git</span> branch -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="中文乱码的解决方案"><a href="#中文乱码的解决方案" class="headerlink" title="中文乱码的解决方案"></a>中文乱码的解决方案</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="提交一个空文件夹"><a href="#提交一个空文件夹" class="headerlink" title="提交一个空文件夹"></a>提交一个空文件夹</h3><p>在空文件夹中建立一个文件 <code>.gitkeep</code>, 你就可以提交这个空文件夹了。</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p><code>git init</code> #初始化  </p><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p><code>git status</code> #获取状态  </p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p><code>git add file</code> # .或*代表全部添加<br><code>git rm --cached &lt;added_file_to_undo&gt;</code> # 在commit之前撤销git add操作<br><code>git reset head</code> # 好像比上面<code>git rm --cached</code>更方便  </p><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p><code>git commit -m &quot;message&quot;</code> #此处注意乱码  </p><h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><p><code>git remote add origin git@github.com:JSLite/test.git</code> #添加源  </p><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master <span class="token comment"># push同事设置默认跟踪分支  </span><span class="token function">git</span> push origin master  <span class="token function">git</span> push -f origin master <span class="token comment"># 强制推送文件，缩写 -f（全写--force）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/JSLite/JSLite.js.git   <span class="token function">git</span> clone git://github.com/JSLite/JSLite.js.git --depth<span class="token operator">=</span><span class="token number">1</span>  <span class="token function">git</span> clone git://github.com/JSLite/JSLite.js.git mypro <span class="token comment"># 克隆到自定义文件夹  </span><span class="token function">git</span> clone <span class="token punctuation">[</span>user@<span class="token punctuation">]</span>example.com:path/to/repo.git/ <span class="token comment"># SSH协议还有另一种写法。  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code>  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> clone http<span class="token punctuation">[</span>s<span class="token punctuation">]</span>://example.com/path/to/repo.git/$ <span class="token function">git</span> clone ssh://example.com/path/to/repo.git/$ <span class="token function">git</span> clone ssh://example.com/path/to/repo.git/$ <span class="token function">git</span> clone git://example.com/path/to/repo.git/$ <span class="token function">git</span> clone /opt/git/project.git $ <span class="token function">git</span> clone file:///opt/git/project.git$ <span class="token function">git</span> clone ftp<span class="token punctuation">[</span>s<span class="token punctuation">]</span>://example.com/path/to/repo.git/$ <span class="token function">git</span> clone rsync://example.com/path/to/repo.git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> config <span class="token comment"># 获取帮助信息  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">add</span> *   <span class="token comment"># 跟踪新文件   </span><span class="token function">git</span> <span class="token function">add</span> -u <span class="token punctuation">[</span>path<span class="token punctuation">]</span>   <span class="token comment"># 添加[指定路径下]已跟踪文件   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rm</span> *<span class="token operator">&amp;</span><span class="token function">git</span> <span class="token function">rm</span> *          <span class="token comment"># 移除文件  </span><span class="token function">git</span> <span class="token function">rm</span> -f *            <span class="token comment"># 移除文件  </span><span class="token function">git</span> <span class="token function">rm</span> --cached *      <span class="token comment"># 取消跟踪  </span><span class="token function">git</span> <span class="token function">mv</span> file_from file_to  <span class="token comment"># 重命名跟踪文件  </span><span class="token function">git</span> log   <span class="token comment"># 查看提交记录  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="commit-1"><a href="#commit-1" class="headerlink" title="commit"></a>commit</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> commit <span class="token comment">#提交更新   </span><span class="token function">git</span> commit -m <span class="token string">'message'</span> <span class="token comment">#提交说明   </span><span class="token function">git</span> commit -a <span class="token comment">#跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交   </span><span class="token function">git</span> commit --amend <span class="token comment">#修改最后一次提交   </span><span class="token function">git</span> commit log <span class="token comment">#查看所有提交，包括没有push的commit    </span><span class="token function">git</span> commit -m <span class="token string">"#133"</span> <span class="token comment">#关联issue 任意位置带上# 符号加上issue号码  </span><span class="token function">git</span> commit -m <span class="token string">"fix #133"</span> commit关闭issue  <span class="token function">git</span> commit -m <span class="token string">'概要描述'</span>$<span class="token string">'<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>'</span>'1.详细描述<span class="token string">'$'</span><span class="token punctuation">\</span>n<span class="token string">''</span><span class="token number">2</span>.详细描述' <span class="token comment">#提交简要描述和详细描述  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reset HEAD *  <span class="token comment"># 取消已经暂存的文件   </span><span class="token function">git</span> reset --mixed HEAD * <span class="token comment"># 同上   </span><span class="token function">git</span> reset --soft HEAD *  <span class="token comment"># 重置到指定状态，不会修改索引区和工作树   </span><span class="token function">git</span> reset --hard HEAD *  <span class="token comment"># 重置到指定状态，会修改索引区和工作树   </span><span class="token function">git</span> reset -- files *     <span class="token comment"># 重置index区文件   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> revert HEAD   <span class="token comment"># 撤销前一次操作   </span><span class="token function">git</span> revert HEAD~  <span class="token comment"># 撤销前前一次操作   </span><span class="token function">git</span> revert commit <span class="token comment"># 撤销指定操作   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> checkout -- <span class="token function">file</span>  <span class="token comment"># 取消对文件的修改（从暂存区——覆盖worktree file）  </span><span class="token function">git</span> checkout branch<span class="token operator">|</span>tag<span class="token operator">|</span>commit -- file_name  <span class="token comment"># 从仓库取出file覆盖当前分支   </span><span class="token function">git</span> checkout HEAD~1 <span class="token punctuation">[</span>文件<span class="token punctuation">]</span>  <span class="token comment"># 将会更新 working directory 去匹配某次 commit   </span><span class="token function">git</span> checkout -- <span class="token builtin class-name">.</span>          <span class="token comment"># 从暂存区取出文件覆盖工作区   </span><span class="token function">git</span> checkout -b gh-pages  0c304c9  <span class="token comment"># 这个表示 从当前分支 commit 哈希值为 0c304c9 的节点，分一个新的分支gh-pages出来，并切换到 gh-pages   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">diff</span> <span class="token function">file</span>     <span class="token comment"># 查看指定文件的差异   </span><span class="token function">git</span> <span class="token function">diff</span> --stat   <span class="token comment"># 查看简单的diff结果   </span><span class="token function">git</span> <span class="token function">diff</span>          <span class="token comment"># 比较 Worktree 和 Index 之间的差异   </span><span class="token function">git</span> <span class="token function">diff</span> --cached   <span class="token comment"># 比较Index和HEAD之间的差异   </span><span class="token function">git</span> <span class="token function">diff</span> HEAD       <span class="token comment"># 比较Worktree和HEAD之间的差异   </span><span class="token function">git</span> <span class="token function">diff</span> branch     <span class="token comment"># 比较Worktree和branch之间的差异   </span><span class="token function">git</span> <span class="token function">diff</span> branch1 branch2  <span class="token comment"># 比较两次分支之间的差异   </span><span class="token function">git</span> <span class="token function">diff</span> commit commit    <span class="token comment"># 比较两次提交之间的差异   </span><span class="token function">git</span> <span class="token function">diff</span> master<span class="token punctuation">..</span>test   <span class="token comment"># 上面这条命令只显示两个分支间的差异  </span><span class="token function">git</span> <span class="token function">diff</span> master<span class="token punctuation">..</span>.test    <span class="token comment"># 你想找出‘master’,‘test’的共有 父分支和'test'分支之间的差异，你用3个‘.'来取代前面的两个'.'  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><p>存储当前的修改，但不用提交 commit</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> stash <span class="token comment"># 将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。  </span><span class="token function">git</span> stash -u    <span class="token comment"># 保存当前状态，包括 untracked 的文件</span><span class="token function">git</span> stash list  <span class="token comment"># 查看保存的工作现场   </span><span class="token function">git</span> stash apply <span class="token comment"># 恢复工作现场   </span><span class="token function">git</span> stash drop  <span class="token comment"># 删除stash内容</span><span class="token function">git</span> stash <span class="token function">clear</span> <span class="token comment"># 删除所有的 stash</span><span class="token function">git</span> stash pop   <span class="token comment"># 恢复的同时直接删除stash内容   </span><span class="token function">git</span> stash apply stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span> <span class="token comment"># 恢复指定的工作现场，当你保存了不只一份工作现场时。</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>stash@<span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token operator">></span> -- <span class="token operator">&lt;</span>file-path<span class="token operator">></span> <span class="token comment"># 从 stash 中拿出某个文件的修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge --squash <span class="token builtin class-name">test</span> <span class="token comment"># 合并压缩，将test上的commit压缩为一条   </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> cherry-pick commit    <span class="token comment"># 拣选合并，将commit合并到当前分支   </span><span class="token function">git</span> cherry-pick -n commit <span class="token comment"># 拣选多个提交，合并完后可以继续拣选下一个提交   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> rebase master   <span class="token comment"># 将master分之上超前的提交，变基到当前分支  </span><span class="token function">git</span> rebase --onto master 169a6  <span class="token comment"># 限制回滚范围，rebase当前分支从169a6以后的提交  </span><span class="token function">git</span> rebase --interactive <span class="token comment"># 交互模式，修改commit   </span><span class="token function">git</span> rebase --continue    <span class="token comment"># 处理完冲突继续合并   </span><span class="token function">git</span> rebase --skip        <span class="token comment"># 跳过   </span><span class="token function">git</span> rebase --abort       <span class="token comment"># 取消合并    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支branch"><a href="#分支branch" class="headerlink" title="分支branch"></a>分支branch</h3><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> push origin :branchName  <span class="token comment"># 删除远程分支  </span><span class="token function">git</span> push origin --delete new <span class="token comment"># 删除远程分支new   </span><span class="token function">git</span> branch -d branchName     <span class="token comment"># 删除本地分支，强制删除用-D  </span><span class="token function">git</span> branch -d <span class="token builtin class-name">test</span>      <span class="token comment"># 删除本地test分支   </span><span class="token function">git</span> branch -D <span class="token builtin class-name">test</span>      <span class="token comment"># 强制删除本地test分支   </span><span class="token function">git</span> remote prune origin <span class="token comment"># 远程删除了，本地还能看到远程存在，这条命令删除远程不存在的分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin branchName <span class="token comment"># 提交分支到远程origin主机中  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch -p <span class="token comment"># 拉取远程分支时，自动清理 远程分支已删除，本地还存在的对应同名分支。  </span><span class="token function">git</span> fetch origin <span class="token string">'+refs/heads/*:refs/heads/*'</span> <span class="token comment"># 更新所有分支内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> merge branchName      <span class="token comment"># 合并分支 - 将分支branchName和当前所在分支合并   </span><span class="token function">git</span> merge origin/master   <span class="token comment"># 在本地分支上合并远程分支。   </span><span class="token function">git</span> rebase origin/master  <span class="token comment"># 在本地分支上合并远程分支。   </span><span class="token function">git</span> merge <span class="token builtin class-name">test</span>            <span class="token comment"># 将test分支合并到当前分支   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -m old new <span class="token comment"># 重命名分支  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> branch      <span class="token comment"># 列出本地分支   </span><span class="token function">git</span> branch -r   <span class="token comment"># 列出远端分支   </span><span class="token function">git</span> branch -a   <span class="token comment"># 列出所有分支   </span><span class="token function">git</span> branch -v   <span class="token comment"># 查看各个分支最后一个提交对象的信息   </span><span class="token function">git</span> branch --merge      <span class="token comment"># 查看已经合并到当前分支的分支   </span><span class="token function">git</span> branch --no-merge   <span class="token comment"># 查看为合并到当前分支的分支   </span><span class="token function">git</span> remote show origin  <span class="token comment"># 可以查看remote地址，远程分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> branch <span class="token builtin class-name">test</span> <span class="token comment"># 新建test分支  </span><span class="token function">git</span> branch newBrach 3defc69 <span class="token comment"># 指定哈希3defc69，新建分支名字为newBrach</span><span class="token function">git</span> checkout -b newBrach origin/master <span class="token comment"># 取回远程主机的更新以后，在它的基础上创建一个新的分支  </span><span class="token function">git</span> checkout -b newBrach 3defc69 <span class="token comment"># 以哈希值3defc69，新建 newBrach 分支，并切换到该分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> branch --set-upstream dev origin/dev     <span class="token comment"># 将本地dev分支与远程dev分支之间建立链接  </span><span class="token function">git</span> branch --set-upstream master origin/next <span class="token comment"># 手动建立追踪关系  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="分支切换"><a href="#分支切换" class="headerlink" title="分支切换"></a>分支切换</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> checkout -        <span class="token comment"># 快速切换分支上一个分支</span><span class="token function">git</span> checkout <span class="token builtin class-name">test</span>     <span class="token comment"># 切换到test分支   </span><span class="token function">git</span> checkout -b <span class="token builtin class-name">test</span>  <span class="token comment"># 新建+切换到test分支   </span><span class="token function">git</span> checkout -b <span class="token builtin class-name">test</span> dev <span class="token comment"># 基于dev新建test分支，并切换   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="远端"><a href="#远端" class="headerlink" title="远端"></a>远端</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span>   <span class="token comment"># fetch取回所有分支（branch）的更新  </span><span class="token function">git</span> fetch origin remotebranch<span class="token punctuation">[</span>:localbranch<span class="token punctuation">]</span>   <span class="token comment">#  从远端拉去分支[到本地指定分支]   </span><span class="token function">git</span> merge origin/branch   <span class="token comment"># 合并远端上指定分支   </span><span class="token function">git</span> pull origin remotebranch:localbranch  <span class="token comment">#  拉去远端分支到本地分支   </span><span class="token function">git</span> push origin branch    <span class="token comment"># 将当前分支，推送到远端上指定分支   </span><span class="token function">git</span> push origin localbranch:remotebranch  <span class="token comment"># 推送本地指定分支，到远端上指定分支   </span><span class="token function">git</span> push origin :remotebranch   <span class="token comment"># 删除远端指定分支   </span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>--track<span class="token punctuation">]</span> <span class="token builtin class-name">test</span> origin/dev <span class="token comment"># 基于远端dev分支，新建本地test分支[同时设置跟踪]  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a>submodule</h3><p>克隆项目同时克隆 submodule</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/jaywcjlove/handbook.git --depth<span class="token operator">=</span><span class="token number">1</span> --recurse-submodules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆项目，之后再手动克隆 submodule 子项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule <span class="token function">add</span> -b gh-pages --force <span class="token string">'仓库地址'</span> <span class="token string">'路径'</span><span class="token function">git</span> submodule <span class="token function">add</span> --force <span class="token string">'仓库地址'</span> <span class="token string">'路径'</span><span class="token comment"># 其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。</span><span class="token comment"># 注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</span><span class="token function">git</span> submodule init <span class="token comment"># 初始化 submodule</span><span class="token function">git</span> submodule update <span class="token comment"># 更新submodule(必须在根目录执行命令)</span><span class="token function">git</span> submodule update --init --recursive  <span class="token comment"># 下载的工程带有submodule</span><span class="token function">git</span> submodule update --recursive --remote <span class="token comment"># 对于 git 1.8.2 或更高版本，添加了选项 --remote 以支持更新远程分支</span><span class="token function">git</span> pull --recurse-submodules <span class="token comment"># 更新 submodule git 1.7.3 版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用<code>git clone</code>下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule foreach --recursive <span class="token function">git</span> submodule init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更新-submodule"><a href="#更新-submodule" class="headerlink" title="更新 submodule"></a>更新 submodule</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> submodule foreach <span class="token function">git</span> pull  <span class="token comment"># submodule 里有其他的 submodule 一次更新</span><span class="token function">git</span> submodule foreach <span class="token function">git</span> pull origin master <span class="token comment"># submodule更新</span><span class="token function">git</span> submodule foreach --recursive <span class="token function">git</span> submodule update<span class="token function">git</span> submodule update --recursive --remote<span class="token function">git</span> pull --recurse-submodules<span class="token function">git</span> submodule deinit --all -f <span class="token comment"># 清理 submodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除-submodule"><a href="#删除-submodule" class="headerlink" title="删除 submodule"></a>删除 submodule</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> ls-files --stage <span class="token operator">&lt;</span>子项目名称路径<span class="token operator">></span> <span class="token comment"># 查看子项目</span><span class="token function">vim</span> .gitmodules <span class="token comment"># 删除对应的 submodule</span><span class="token function">vim</span> .git/config <span class="token comment"># 删除对应的 submodule</span><span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token operator">&lt;</span>子模块名称<span class="token operator">></span> <span class="token comment"># 删除缓存中的子项目，注意没有 `/`</span><span class="token function">git</span> <span class="token function">rm</span> --cached subProjectName<span class="token function">rm</span> -rf project/subProjectName<span class="token function">rm</span> .git/module/* <span class="token comment"># 删除模块下的子模块目录，每个子模块对应一个目录，注意只删除对应的子模块目录即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换分支"><a href="#转换分支" class="headerlink" title="转换分支"></a>转换分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config -f .gitmodules submodule.public.branch gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是更改 <code>.gitmodules</code>  文件内容</p><pre class="line-numbers language-none"><code class="language-none">[submodule &quot;public&quot;]  path &#x3D; public  url &#x3D; git@github.com:jaywcjlove&#x2F;gitke.git  branch &#x3D; gh-pages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -rf node_modules/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="remote-1"><a href="#remote-1" class="headerlink" title="remote"></a>remote</h3><p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。个人开发时，多源用的可能不多，但多源其实非常有用。  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> remote <span class="token function">add</span> origin1 git@github.com:yanhaijing/data.js.git  <span class="token function">git</span> remote    <span class="token comment"># 显示全部源  </span><span class="token function">git</span> remote -v <span class="token comment"># 显示全部源+详细信息  </span><span class="token function">git</span> remote <span class="token function">rename</span> origin1 origin2 <span class="token comment"># 重命名  </span><span class="token function">git</span> remote <span class="token function">rm</span> origin    <span class="token comment"># 删除  </span><span class="token function">git</span> remote show origin  <span class="token comment"># 查看指定源的全部信息  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签tag"><a href="#标签tag" class="headerlink" title="标签tag"></a>标签tag</h3><p>当开发到一定阶段时，给程序打标签是非常棒的功能。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag -a v0.1 -m <span class="token string">'my version 1.4'</span> <span class="token comment"># 新建带注释标签   </span><span class="token function">git</span> push origin --tags              <span class="token comment"># 一次性推送所有分支 </span><span class="token function">git</span> push origin v1.5                <span class="token comment"># 推送单个tag到orgin源上 </span><span class="token function">git</span> tag -v v1.4.2.1                 <span class="token comment"># 验证标签，验证已经签署的标签</span><span class="token function">git</span> show v1.5                       <span class="token comment"># 看到对应的 GPG 签</span><span class="token function">git</span> tag        <span class="token comment"># 列出现有标签   </span><span class="token function">git</span> tag v0gi.1 <span class="token comment"># 新建标签   </span><span class="token function">git</span> checkout tagname   <span class="token comment"># 切换到标签       </span><span class="token function">git</span> tag -d v0.1 <span class="token comment"># 删除标签   </span><span class="token function">git</span> push origin :refs/tags/v0.1 <span class="token comment"># 删除远程标签   </span><span class="token function">git</span> pull --all <span class="token comment"># 获取远程所有内容包括tag  </span><span class="token function">git</span> --git-dir<span class="token operator">=</span><span class="token string">'&lt;绝对地址>/.git'</span> describe --tags HEAD <span class="token comment"># 查看本地版本信息  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重命名Tag"><a href="#重命名Tag" class="headerlink" title="重命名Tag"></a>重命名Tag</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> .git/refs/tags/1.9.1 .git/refs/tags/v1.9.1<span class="token function">git</span> push -f --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="日志log"><a href="#日志log" class="headerlink" title="日志log"></a>日志log</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config format.pretty oneline  <span class="token comment"># 显示历史记录时，每个提交的信息只显示一行   </span><span class="token function">git</span> config color.ui <span class="token boolean">true</span> <span class="token comment"># 彩色的 git 输出   </span><span class="token function">git</span> log <span class="token comment"># 查看最近的提交日志</span><span class="token function">git</span> log --grep<span class="token operator">=</span><span class="token number">224</span> <span class="token comment"># 这条命令是查看含有 "224" 关键字的 git commit </span><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline <span class="token comment"># 单行显示提交日志   </span><span class="token function">git</span> log --graph --pretty<span class="token operator">=</span>oneline --abbrev-commit   <span class="token function">git</span> log -num <span class="token comment"># 显示第几条log（倒数）   </span><span class="token function">git</span> reflog   <span class="token comment"># 查看所有分支的所有操作记录   </span><span class="token function">git</span> log --since<span class="token operator">=</span><span class="token number">1</span>.day <span class="token comment"># 一天内的提交；你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。   </span><span class="token function">git</span> log --pretty<span class="token operator">=</span><span class="token string">"%h - %s"</span> --author<span class="token operator">=</span>自己的名字 <span class="token comment"># 查看自己的日志   </span><span class="token function">git</span> log -p -2  <span class="token comment"># 展开两次更新显示每次提交的内容差异   </span><span class="token function">git</span> log --stat <span class="token comment"># 要快速浏览其他协作者提交的更新都作了哪些改动   </span><span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">"%h - %an, %ar : %s"</span># 定制要显示的记录格式   <span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">'%h : %s'</span> --date-order --graph <span class="token comment"># 拓扑顺序展示   </span><span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">'%h : %s - %ad'</span> --date<span class="token operator">=</span>short   <span class="token comment"># 日期YYYY-MM-DD显示</span><span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline --graph --decorate --all <span class="token comment"># 展示简化的 commit 历史</span><span class="token function">git</span> log <span class="token operator">&lt;</span>last tag<span class="token operator">></span> HEAD --pretty<span class="token operator">=</span>format:%s <span class="token comment"># 只显示commit   </span><span class="token function">git</span> config --global format.pretty <span class="token string">'%h : %s - %ad'</span> --date<span class="token operator">=</span>short <span class="token comment">#日期YYYY-MM-DD显示 写入全局配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>说明</th><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈希字串</td><td>%ad</td><td>作者修订日期（可以用 -date= 选项定制格式）</td></tr><tr><td>%h</td><td>提交对象的简短哈希字串</td><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字串</td><td>%cn</td><td>提交者(committer)的名字</td></tr><tr><td>%t</td><td>树对象的简短哈希字串</td><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字串</td><td>%cd</td><td>提交日期</td></tr><tr><td>%p</td><td>父对象的简短哈希字串</td><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%an</td><td>作者（author）的名字</td><td>%s</td><td>提交说明</td></tr><tr><td>%ae</td><td>作者的电子邮件地址</td><td>-</td><td>-</td></tr></tbody></table><p><a href="https://git-scm.com/docs/git-log#_pretty_formats">Pretty Formats</a></p><h3 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a>重写历史</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend    <span class="token comment"># 改变最近一次提交  </span><span class="token function">git</span> rebase -i HEAD~3  <span class="token comment"># 修改最近三次的提交说明，或者其中任意一次  </span><span class="token function">git</span> commit --amend    <span class="token comment"># 保存好了，这些指示很明确地告诉了你该干什么  </span><span class="token function">git</span> rebase --continue <span class="token comment"># 修改提交说明，退出编辑器。  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick f7f3f6d changed my name a bitpick 310154e updated README formatting and added blamepick a5f4a0d added cat-file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改成</p><pre class="line-numbers language-none"><code class="language-none">pick 310154e updated README formatting and added blamepick f7f3f6d changed my name a bit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token builtin class-name">help</span> *  <span class="token comment"># 获取命令的帮助信息  </span><span class="token function">git</span> status  <span class="token comment"># 获取当前的状态，非常有用，因为git会提示接下来的能做的操作  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="报错问题解决"><a href="#报错问题解决" class="headerlink" title="报错问题解决"></a>报错问题解决</h3><p><strong>1. <code>git fatal: protocol error: bad line length character: No s</code></strong></p><p>解决办法：更换remote地址为 <code>http/https</code> 的  </p><p><strong>2. <code>The requested URL returned error: 403 Forbidden while accessing</code></strong></p><p>解决github push错误的办法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#vim 编辑器打开 当前项目中的config文件</span><span class="token function">vim</span> .git/config<span class="token comment">#修改</span><span class="token punctuation">[</span>remote <span class="token string">"origin"</span><span class="token punctuation">]</span>      url <span class="token operator">=</span> https://github.com/jaywcjlove/example.git  <span class="token comment">#为下面代码</span><span class="token punctuation">[</span>remote <span class="token string">"origin"</span><span class="token punctuation">]</span>      url <span class="token operator">=</span> https://jaywcjlove@github.com/jaywcjlove/example.git  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. git status 显示中文问题</strong></p><p>在查看状态的时候 git status 如果是中文就显示下面的情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span><span class="token number">344</span><span class="token punctuation">\</span><span class="token number">272</span><span class="token punctuation">\</span><span class="token number">247</span><span class="token punctuation">\</span><span class="token number">345</span><span class="token punctuation">\</span><span class="token number">223</span><span class="token punctuation">\</span><span class="token number">201</span><span class="token punctuation">\</span><span class="token number">351</span><span class="token punctuation">\</span><span class="token number">234</span><span class="token punctuation">\</span><span class="token number">200</span><span class="token punctuation">\</span><span class="token number">346</span><span class="token punctuation">\</span><span class="token number">261</span><span class="token punctuation">\</span><span class="token number">202</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决这个问题方法是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4. The authenticity of host 192.168.0.xxx can’t be establis</strong></p><p>修改 <code>/etc/ssh/ssh_config</code> 中的 <code>StrictHostKeyChecking</code> 的 <code>ask</code> 为 <code>no</code> 解决问题。</p><p><strong>5. SSH连接时出现 Host key verification failed 的原因及解决方法</strong></p><p>用 OpenSSH 的人都知 ssh 会把你每个你访问过计算机的公钥(public key)都记录在~/.ssh/known_hosts。当下次访问相同计算机时，OpenSSH 会核对公钥。如果公钥不同，OpenSSH 会发出警告，避免你受到 DNS Hijack 之类的攻击。<br>SSH 对主机的 public_key 的检查等级是根据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no  <span class="token comment"># 最不安全的级别，当然也没有那么多烦人的提示了，相对安全的内网测试时建议使用。如果连接server的key在本地不存在，那么就自动添加到文件中（默认是known_hosts），并且给出一个警告。</span><span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>ask <span class="token comment"># 默认的级别，就是出现刚才的提示了。如果连接和key不匹配，给出提示，并拒绝登录。</span><span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>yes <span class="token comment"># 最安全的级别，如果连接与key不匹配，就拒绝连接，不会提示详细信息。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>【解决方法1】在 <code>.ssh/config</code>（或者<code>/etc/ssh/ssh_config</code>）中配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">StrictHostKeyChecking noUserKnownHostsFile &#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方法 2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> ~/.ssh/known_hosts <span class="token comment"># 删除对应ip的相关rsa信息</span><span class="token function">rm</span> known_hosts <span class="token comment"># 或者直接全部删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>5. insufficient permission for adding an object to repository database .git/objects</strong></p><pre class="line-numbers language-none"><code class="language-none">cd .git&#x2F;objectsls -alsudo chown -R yourname:yourgroup *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组循环遍历方法</title>
      <link href="2020/10/21/js%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
      <url>2020/10/21/js%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h3 id="for-循环代码块一定的次数"><a href="#for-循环代码块一定的次数" class="headerlink" title="for:循环代码块一定的次数"></a>for:循环代码块一定的次数</h3><p> for 循环的语法：for (语句 1; 语句 2; 语句 3){  语句 4:   被执行的代码块 }<br> 语句 1 （代码块）开始前执行;语句 2 定义运行循环（代码块）的条件;语句 3 在循环（代码块）已被执行之后执行<br>执行顺序是：语句 1，语句 2， 语句 4，语句 3<br>应用最为普遍的循环写法，性能好，可读性好。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 1, 2, 3, 45, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="升级版for"><a href="#升级版for" class="headerlink" title="升级版for"></a>升级版for</h3><p>优点：性能比普通for循环好，省去了每次对于数组长度的判断。<br>缺点：对于长度可能会产生变动的数组，这种方法不适用，可能会导致有的值没被遍历到等错误。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 1, 2, 3, 45, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="forEach-方法用于调用数组的每个元素，并将元素传递给回调函数"><a href="#forEach-方法用于调用数组的每个元素，并将元素传递给回调函数" class="headerlink" title="forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数"></a>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</h3><p>语法：array.forEach(function(currentValue, index, arr), thisValue) currentValue 必须 当前元素值 ；index 可选 当前元素的索引值 ；arr 可选 当前元素属于的数组对象。<br>优点：提供的三个参数可以很大程度上减少代码长度，可读性好。<br>缺点：无法遍历对象， 在IE9以上才能使用，而且无法使用 break，continue 跳出循环，使用 return 是跳过本次循环。<br>forEach循环数组而已。foreach函数无法用break跳出</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// [1, 2, 3, 45, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="each-方法主要用于DOM遍历，each-方法规定为每个匹配元素规定运行的函数。通过它，你可以遍历对象、数组的属性值并进行处理"><a href="#each-方法主要用于DOM遍历，each-方法规定为每个匹配元素规定运行的函数。通过它，你可以遍历对象、数组的属性值并进行处理" class="headerlink" title="each() 方法主要用于DOM遍历，each() 方法规定为每个匹配元素规定运行的函数。通过它，你可以遍历对象、数组的属性值并进行处理"></a>each() 方法主要用于DOM遍历，each() 方法规定为每个匹配元素规定运行的函数。通过它，你可以遍历对象、数组的属性值并进行处理</h3><p>语法：$(selector).each(function(index,element));index - 选择器的 index 位置，element - 当前的元素（也可使用 “this” 选择器）.<br> 优点：既可以遍历数组，也可以遍历对象，jQuery对于方法进行了改进，一些语句可以跳出循环：<br> return false：将停止循环 (就像在普通的循环中使用 ‘break’)。<br> return true：跳至下一个循环(就像在普通的循环中使用’continue’)。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="map-对数组中的每一个元素进行操作"><a href="#map-对数组中的每一个元素进行操作" class="headerlink" title="map():对数组中的每一个元素进行操作"></a>map():对数组中的每一个元素进行操作</h3><p>语法：function(currentValue,index,arr) currentValue 必须 当前元素值 ；index 可选 当前元素的索引值 ；arr 可选 当前元素属于的数组对象,<br>map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理的后值。 map()方法按照原始数组元素顺序依次处理元素.<br>优缺点和forEach相似，IE9+才能使用，如果想在低版本IE运行，可以在原型里添加方法<br> 需要注意的是map方法返回的是一个新的数组，不会改变之前的数组， 而且break，continue等语句失效，无法提前跳出循环，而且map方法是可以使用return语句的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//1 0</span><span class="token comment">//2 1</span><span class="token comment">//3 2</span><span class="token comment">//45 3</span><span class="token comment">//6 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-in-一般用来遍历对象的每一个属性。每次都将属性名作为字符串保存在变量里-但是它也可以遍历数组"><a href="#for-in-一般用来遍历对象的每一个属性。每次都将属性名作为字符串保存在变量里-但是它也可以遍历数组" class="headerlink" title="for in:一般用来遍历对象的每一个属性。每次都将属性名作为字符串保存在变量里,但是它也可以遍历数组"></a>for in:一般用来遍历对象的每一个属性。每次都将属性名作为字符串保存在变量里,但是它也可以遍历数组</h3><p>  语法：for (variable in object ) {…statement}<br> variable是一个变量名，数组的一个元素或者是对象的一个属性<br> object是一个对象名，或者是计算结果为对象的表达式。<br> statement通常是一个原始语句或者语句块，由它构成循环的主体。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> aa <span class="token keyword">in</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> f<span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//a 1</span><span class="token comment">//b 2</span><span class="token comment">//c 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> aa <span class="token keyword">in</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//1, 2, 3, 45, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> for of 读取键值（适合处理数组),而for … in  用于对象或基础的可访问属性的遍历，适合处理对象<br> 优点：简洁，可以使用break、continue、return等语句，可以遍历数组、对象、DOM节点数组、Set对象等等<br> 缺点：属于ES6的语法内容，使用时应注意兼容性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>aa <span class="token keyword">of</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//1, 2, 3, 45, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter-过滤数组。返回值为true的元素组成新数组"><a href="#filter-过滤数组。返回值为true的元素组成新数组" class="headerlink" title="filter:过滤数组。返回值为true的元素组成新数组"></a>filter:过滤数组。返回值为true的元素组成新数组</h3><p>语法：function(currentValue,index,arr) currentValue 必须 当前元素值 ；index 可选 当前元素的索引值 ；arr 可选 当前元素属于的数组对象。<br>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> g1 <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=></span> a <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g1<span class="token punctuation">)</span><span class="token comment">//[ 45, 6 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduce-进行累加或者累积操作。-该方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值"><a href="#reduce-进行累加或者累积操作。-该方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值" class="headerlink" title="reduce:进行累加或者累积操作。,该方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值"></a>reduce:进行累加或者累积操作。,该方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</h3><p>语法:array.reduce(function(total, currentValue, currentIndex, arr), initialValue)<br> total必需。初始值, 或者计算结束后的返回值。currentValue必需。当前元素；currentIndex可选。当前元素的索引；arr可选。当前元素所属的数组对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> h1 <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token comment">//-55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="some-检查数组中是否有元素满足条件。某一元素为true，则为true，否则返回false-一个满足条件即可"><a href="#some-检查数组中是否有元素满足条件。某一元素为true，则为true，否则返回false-一个满足条件即可" class="headerlink" title="some:检查数组中是否有元素满足条件。某一元素为true，则为true，否则返回false(一个满足条件即可)"></a>some:检查数组中是否有元素满足条件。某一元素为true，则为true，否则返回false(一个满足条件即可)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> i1 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="every-检查数组中是否所有元素都满足条件。某一个为false，则返回false，否则返回true-都必须满足条件"><a href="#every-检查数组中是否所有元素都满足条件。某一个为false，则返回false，否则返回true-都必须满足条件" class="headerlink" title="every() - 检查数组中是否所有元素都满足条件。某一个为false，则返回false，否则返回true(都必须满足条件)"></a>every() - 检查数组中是否所有元素都满足条件。某一个为false，则返回false，否则返回true(都必须满足条件)</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> j1 <span class="token operator">=</span> j<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js遍历数组及对数组进行增删改查方法汇总</title>
      <link href="2020/10/21/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E5%8F%8A%E5%AF%B9%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>2020/10/21/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%E5%8F%8A%E5%AF%B9%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h3><p><strong>方法解释：</strong></p><ul><li>表达式1：赋值表达式，用来给控制变量赋初值。（只执行一次）</li><li>表达式2：逻辑表达式，是循环的控制条件，用来判断控制变量是否符合循环条件，否则跳出循环。</li><li>表达式3：赋值表达式，用来对控制变量进行增量或减量操作。</li></ul><p><strong>执行步骤：</strong></p><ul><li>1.声明变量 a = 0</li><li>2.if (a &lt;arr.length ) 继续运行</li><li>3.每执行一次 a += 1</li><li>4.当不满足 a &lt; 10 for循环结束 </li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//1, 2, 3, 4, 5, 6, 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-in遍历"><a href="#for-in遍历" class="headerlink" title="for in遍历"></a>for in遍历</h3><ul><li>for…in 语句用于对数组或者对象的属性进行循环操作。</li><li>for … in 循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。</li></ul><p><strong>基本语法：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>变量 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   在此执行代码<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-for-in遍历对象"><a href="#1-for-in遍历对象" class="headerlink" title="(1).for in遍历对象"></a>(1).for in遍历对象</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"王力宏"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">38</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj的key:'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token string">'  obj的value:'</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 结果：</span><span class="token comment">// obj的key: id      obj的value: 1</span><span class="token comment">// obj的key: name    obj的value: 王力宏</span><span class="token comment">// obj的key: age     obj的value: 38</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-for-in遍历数组"><a href="#2-for-in遍历数组" class="headerlink" title="(2).for in遍历数组"></a>(2).for in遍历数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(key) //0,1,2,3</span>  <span class="token comment">// console.log(arr[key]) //7,3,5,6</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//出现四次[ 7, 3, 5, 6 ]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不推荐用for-in来循环一个数组，因为，不像对象，数组的 index 跟普通的对象属性不一样，是重要的数值序列指标。总之， for – in 是用来循环带有字符串key的对象的方法。</p><h3 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for of循环"></a>for of循环</h3><p>for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。</p><p>基本语法:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。</p><h4 id="1-for-of遍历数组"><a href="#1-for-of遍历数组" class="headerlink" title="(1).for of遍历数组"></a>(1).for of遍历数组</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//7, 3, 5, 6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-for-of循环一个字符串"><a href="#2-for-of循环一个字符串" class="headerlink" title="(2).for of循环一个字符串"></a>(2).for of循环一个字符串</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//我是中国人</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="forEach遍历"><a href="#forEach遍历" class="headerlink" title="forEach遍历"></a>forEach遍历</h3><p>forEach() 方法对数组的每个元素执行一次提供的函数。forEach() 需要一个回调函数，作为参数，该方法中的function回调有三个参数：</p><ul><li>第一个参数是遍历的数组内容，</li><li>第二个参数是对应的数组索引，</li><li>第三个参数是数组本身</li></ul><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//code something&#125;);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例.取下面数组的和</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">//1, 2, 3, 4, 5, 6</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//1, 2, 3, 4, 5, 6</span>  a <span class="token operator">+=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token comment">// a += array[index]==a=a+value</span>  <span class="token comment">//console.log(a)  //21</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h3><p>  map（）方法返回一个由原数组中的每个元素调用一个指定方法后的返回值组成的新数组,循环中的map意思为“映射”，map方法和forEach方法类似，和forEach不同的是，map有返回值,在工作中如果需要根据条件重组数组，用map会很方便。</p><p>  <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thisValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数描述:</strong></p><ul><li>currentValue：【必填】数组中正在处理的当前元素。</li><li>index：【可选】数组中正在处理的当前元素的索引。</li><li>arr：【可选】方法被调用的数组。也就是当前元素属于的数组对象。</li><li>thisValue：【可选】执行回调函数时使用的this值。</li><li>map的回调函数中支持return返回值；return的并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了</li></ul><p>例.将数组里面的值都乘以3</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Es5写法</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//ES6箭头函数写法</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> value <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果显示：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment">// 原数组拷贝了一份，并进行了修改,结果为[ 3, 9, 12, 18 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//  原数组并未发生变化,结果为[ 1, 3, 4, 6 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>注意</code>：map 和 forEach 方法都是只能用来遍历数组，不能用来遍历普通对象。</p><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()  方法"></a>filter()  方法</h3><p>filter 方法是 Array 对象内置方法，它会返回通过过滤的元素，不改变原来的数组。</p><p>  <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用法说明：filter 为数组中的每个元素调用一次 callback 函数，并利用所有使得 callback 返回 true 或 等价于 true 的值 的元素创建一个新数组。</li></ul><p>例.筛选排除掉所有的小于5的数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//console.log(num)//得到新数组[7, 9, 11]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every() 方法"></a>every() 方法</h3><p>every()是对数组中的每一项运行给定函数，如果该函数对每一项返回true,则返回true。every方法返回值是布尔类型,针对数组中的每一个元素进行比对，只要有一个元素比对结果为false则返回false，反之要所有的元素比对结果为true才为true</p><p> <strong>结果显示：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment">//得到新数组[7, 9, 11]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例.判断数组中所有的值是否都大于3,，有一个条件不满足则返回false</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> indec<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//console.log(num)//因为1，2小于3，存在不满足值，所以得出结果为false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="some方法"><a href="#some方法" class="headerlink" title="some方法"></a>some方法</h3><p> some()是对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。 some方法返回值是布尔类型，同样是针对数组中的每一个元素，但是这个方法是，只要有一个元素比对结果为true，返回结果就为true，反之要所有的元素比对结果为false才为false</p><p>例.判断数组中是否存在大于3的值，有一个条件满足则返回true</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> indec<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//console.log(num)//尽管1，2小于3，存在不满足值，但是some是判断其中一个满足条件就为true</span><span class="token comment">//结果为true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find方法"><a href="#find方法" class="headerlink" title="find方法"></a>find方法</h3><p> find()方法返回第一个满足过滤方法的元素，一个都没有满足的就返回undefined，遇到一个满足的元素后遍历就停止了,这个方法支持的浏览器太少，慎用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> indec<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment">//由于数组中满足条件的第一个数数6，所以结果返回6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="reduce方法-求和用"><a href="#reduce方法-求和用" class="headerlink" title="reduce方法 (求和用)"></a>reduce方法 (求和用)</h3><p>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</p><p>   <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>参数解析：</li><li>arr 表示原数组；</li><li>prev 表示上一次调用回调时的返回值，或者初始值 init;</li><li>cur 表示当前正在处理的数组元素；</li><li>index 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0，否则索引为1；</li><li>init 表示初始值。</li><li>注意: reduce() 对于空数组是不会执行回调函数的。</li></ul><p><strong>求和实例：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> total <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token comment">//console.log(num)//21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="concat方法（合并数组"><a href="#concat方法（合并数组" class="headerlink" title="concat方法（合并数组"></a>concat方法（合并数组</h3><p>  concat() 方法用于连接两个或多个数组。可以合并一个或多个数组，会返回合并数组之后的数据，不会改变原来的数组；该方法没有改变原有字符串，但是会返回连接两个或多个字符串新字符串。</p><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">string<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> stringX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>合并数组实例：</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">]</span><span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//console.log(c) //[ 'a', 'b', 'c', 'd', 'e', 'f' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h3><p>join() 方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。<br><strong>基本语法:</strong></p><ul><li>arrayObject.join(separator)</li><li>separator    可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</li><li>返回结果为一个字符串。该字符串是通过把 arrayObject 的每个元素转换为字符串，然后把这些字符串连接起来，在两个元素之间插入separator 字符串而生成的。</li></ul><p><strong>例1：将创建一个数组，然后把它的所有元素放入一个字符串：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(num)//张三,李四,王五,注意：如果（）没有参数，则使用逗号作为分隔符</span><span class="token comment">//console.log(typeof num)//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例2：将使用分隔符来分隔数组中的元素：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token comment">//onsole.log(num)//张三*李四*王五</span><span class="token comment">//console.log(typeof num)//string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pop方法"><a href="#pop方法" class="headerlink" title="pop方法"></a>pop方法</h3><p>pop方法用于删除数组的最后一位，并且返回删除的数据，会改变原来的数组</p><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arrayObject<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>说明pop() 方法将删除 arrayObject 的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。</li><li>返回结果为arrayObject 的最后一个元素。</li></ul><p>例1：有值数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(arr)//[ '张三', '李四' ]</span><span class="token comment">//console.log(num)//王五</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例2：空值数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(arr)//[]</span><span class="token comment">//console.log(num)//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shift方法"><a href="#shift方法" class="headerlink" title="shift方法"></a>shift方法</h3><p>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arrayObject<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(arr)//[  "李四", "王五" ]</span><span class="token comment">//console.log(num)//张三</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unshift方法"><a href="#unshift方法" class="headerlink" title="unshift方法"></a>unshift方法</h3><p>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。与shift方法相反</p><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arrayObject<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>newelement1<span class="token punctuation">,</span>newelement2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">,</span>newelementX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> unshift() 方法将把它的参数插入 arrayObject 的头部，并将已经存在的元素顺次地移到较高的下标处，以便留出空间。该方法的第一个参数将成为数组的新元素 0，如果还有第二个参数，它将成为新的元素 1，以此类推。</p><p>例：向数组的开头添加元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"小米"</span><span class="token punctuation">,</span> <span class="token string">"小百"</span><span class="token punctuation">)</span><span class="token comment">//console.log(arr)//[ '小米', '小百', '张三', '李四', '王五' ]</span><span class="token comment">//console.log(num)//会取出该数组新的长度：5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意</code>unshift方法：unshift()、shift() 是从数组的头部进行增减。unshift() 方法不创建新的创建，而是直接修改原有的数组。</p><h3 id="push方法"><a href="#push方法" class="headerlink" title="push方法"></a>push方法</h3><p>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度,与pop方法相反</p><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arrayObject<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newelement1<span class="token punctuation">,</span>newelement2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">,</span>newelementX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>push() 方法可把它的参数顺序添加到 arrayObject 的尾部。它直接修改 arrayObject，而不是创建一个新的数组。push() 方法和 pop() 方法使用数组提供的先进后出栈的功能。</li></ul><p>例：向数组的末尾添加元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log(arr)//[ '张三', '李四', '王五' ]</span><span class="token comment">//console.log(num)//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <code>注意</code>push方法：push()、pop() 是从数组的尾部进行增减</p><h3 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a>reverse方法</h3><p>reverse方法:颠倒数组中元素的顺序</p><p><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</li></ul><p>例：颠倒数组顺序</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log(arr)//[ '王五', '李四', '张三'  ]</span><span class="token comment">//console.log(num)//[ '王五', '李四', '张三'  ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sort方法"><a href="#sort方法" class="headerlink" title="sort方法"></a>sort方法</h3><p>sort方法用于对数组对元素进行排序，默认为升序。并且返回排过序的新数组<br><strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arrayObject<span class="token punctuation">.</span>sort（sortby）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明:</strong></p><ul><li><p><code>sortby</code>为可选值，用来规定顺序，必须是函数返回值,对数组的引用。</p><p><strong>注意事项:</strong></p></li><li><p>请注意，数组在原数组上进行排序，不生成副本。</p></li><li><p>说明：这里的排序是针对字符的排序，先使用数组的toString()方法转为字符串，再逐位比较，</p></li></ul><p>例1：对数组字符串元素进行排序</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(num)//[ 'a', 'b', 'c', 'e', 'g', 'x' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例2：对数组数字元素进行排序</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(num) //[ 1, 2, 4, 5, 6, 8 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="slice方法"><a href="#slice方法" class="headerlink" title="slice方法"></a>slice方法</h3><p> slice() 方法可从已有的数组中返回选定的元素。功能主要是截取指定位置的数组，并且返回截取的数组，不会改变原数组，slice()方法可提取字符串端某个部分，并且以新的字符串返回被提取的部分</p><p> <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>参数说明：</strong></p><ul><li>start为可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推</li><li>end也为可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li><li>返回值：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</li><li>注意:可从已有的数组中返回选定的元素。该方法接收两个参数slice(start,end)，strat为必选，表示从第几位开始；end为可选，表示到第几位结束(不包含end位)，省略表示到最后一位；start和end都可以为负数，负数时表示从最后一位开始算起，如-1表示最后一位。</li></ul><p>例2：截取数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">//console.log(num)//下标是从0开始，第一为这是”g“,由于结束是第4位结束(不包含4位)，则省略第4为是"b”的值，结果为[ 'g', 'c', 'x' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="splice方法"><a href="#splice方法" class="headerlink" title="splice方法"></a>splice方法</h3><p>splice()方法向数组中添加，或从数组删除，或替换数组中的原始，然后返回被删除/替换的元素。该方法会改变原始数组。<br> <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">arrayObject<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>howmany，item1<span class="token punctuation">,</span><span class="token operator">...</span>itemX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>参数说明：</strong></p><ul><li>index必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li><li>howmany必需。要删除的项目数量。如果设置为 0，则不会删除项目。</li><li>item1, …, itemX,为可选，向数组添加的新项目</li></ul><p><strong>返回值：</strong></p><ul><li>array,包含被删除项目的新数组，如果有的话<br>说明 splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。</li><li>请<code>注意</code>，splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改。</li></ul><p>例1.删除第一项</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//删除第一项</span><span class="token comment">//console.log(arr)//[ "green", "blue" ]</span><span class="token comment">//console.log(num)//red，返回数组中值包含一项</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例2.从位置1开始插入两项</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从位置1开始插入两项</span><span class="token comment">//console.log(arr)//["red", "yellow", "orange", "green", "blue" ]</span><span class="token comment">//console.log(num)//返回的是一个空数组[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例3.插入两项，删除一项</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"greens"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hhh"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//console.log(arr)//[ 'red', 'hhh', 'purple' ]</span><span class="token comment">//console.log(num)//[ 'greens', 'blue' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>toString()功能是将数组转换为字符串，类似于没有参数的join.该方法会在数据发生隐式类型转换时被自动调用，如果手动调用，就是直接转为字符串。不会改变原数组<br> <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">booleanObject<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>返回值：</strong></p><ul><li>根据原始布尔值或者 booleanObject 对象的值返回字符串 “true” 或 “false”。</li></ul><p>例.数组转换为字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//console.log(arr);['张三', '李四', '王五']</span><span class="token comment">//console.log(num); 张三, 李四, 王五</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IndexOf"><a href="#IndexOf" class="headerlink" title="IndexOf()"></a>IndexOf()</h3><p> IndexOf()方法根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引<br> <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">stringObject<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchvalue<span class="token punctuation">,</span>fromindex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>参数说明：</strong></p><ul><li><p>searchvalue是必需的。规定需检索的字符串值。</p></li><li><p>fromindex是可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p></li><li><p>该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。</p></li><li><p>注意：如果找到该数据，立即返回该数据的索引，不再往后继续查找</p></li></ul><p>例.查找数组是否包含某个元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token keyword">let</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'李四1'</span><span class="token punctuation">)</span><span class="token keyword">let</span> n1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//'李四'是否在数组下标为2上面</span><span class="token comment">//console.log(num); //1</span><span class="token comment">//console.log(n); //-1</span><span class="token comment">//console.log(n1); //-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p> lastIndexOf() 方法可返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。<br> <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">stringObject<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>searchvalue<span class="token punctuation">,</span>fromindex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>参数说明：</strong></p><ul><li>searchvalue是必需的。规定需检索的字符串值。</li><li>fromindex为可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。</li><li>如果在 stringObject 中的 fromindex 位置之前存在 searchvalue，则返回的是出现的最后一个 searchvalue 的位置。</li><li>注意：如果要检索的字符串值没有出现，则该方法返回 -1。</li></ul><p>例.返回一个指定的字符串值最后出现的位置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">]</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token keyword">let</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'李四1'</span><span class="token punctuation">)</span><span class="token comment">//console.log(num); //1</span><span class="token comment">//console.log(n); //-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。<br> <strong>基本语法:</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">stringObject<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>stop<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>参数说明：</strong></p><ul><li>start为必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。</li><li>stop为可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。</li><li>如果省略该参数，那么返回的子串会一直到字符串的结尾。</li><li>一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。</li></ul><p>例.提取字符在3的位置内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token keyword">let</span> num <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//console.log(num); //lo world!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
